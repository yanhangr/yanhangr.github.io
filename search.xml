<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>VUE学习</title>
    <url>/2020/01/05/VUE%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="vue模板"><a href="#vue模板" class="headerlink" title="vue模板"></a>vue模板</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;&lt;/template&gt;</span><br><span class="line">&lt;script&gt;&lt;/script&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h3 id="script部分"><a href="#script部分" class="headerlink" title="script部分"></a>script部分</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  name: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 组件的方法</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    // watch擅长处理的场景：一个数据影响多个数据</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    // computed擅长处理的场景：一个数据受多个数据影响</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeCreate: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    // 在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。</span><br><span class="line">  &#125;,</span><br><span class="line">  created: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    // 实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，<span class="variable">$el</span> 属性目前不可见。</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeMount: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    // 在挂载开始之前被调用：相关的 render 函数首次被调用。</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    // 编译好的HTML挂载到页面完成后执行的事件钩子</span><br><span class="line">    // el 被新创建的 vm.<span class="variable">$el</span> 替换，并挂载到实例上去之后调用该钩子。</span><br><span class="line">    // 此钩子函数中一般会做一些ajax请求获取数据进行数据初始化</span><br><span class="line">    console.log(<span class="string">&quot;Home done&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeUpdate: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    // 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</span><br><span class="line">  &#125;,</span><br><span class="line">  updated: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    // 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</span><br><span class="line">    // 当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。</span><br><span class="line">    // 该钩子在服务器端渲染期间不被调用。</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    // 实例销毁之前调用。在这一步，实例仍然完全可用。</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    // Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>转载地址：<a href="https://www.cnblogs.com/chenzeyongjsj/p/8093789.html">https://www.cnblogs.com/chenzeyongjsj/p/8093789.html</a></p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker入门</title>
    <url>/2019/09/13/Docker/</url>
    <content><![CDATA[<h2 id="概念篇"><a href="#概念篇" class="headerlink" title="概念篇"></a>概念篇</h2><p>Docker 面向对象</p>
<h3 id="镜像（Image）"><a href="#镜像（Image）" class="headerlink" title="镜像（Image）"></a>镜像（Image）</h3><p>类比对象，包含一整套Ubuntu 16.04 最小系统的 root 文件系统</p>
<h3 id="容器（Container）"><a href="#容器（Container）" class="headerlink" title="容器（Container）"></a>容器（Container）</h3><p>类比实体类，即镜像运行的实体<br>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。<br>所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。</p>
<h3 id="仓库（Repository）"><a href="#仓库（Repository）" class="headerlink" title="仓库（Repository）"></a>仓库（Repository）</h3><p>保存镜像的地方，有大量优质官方镜像</p>
<span id="more"></span>

<h2 id="安装篇–centos"><a href="#安装篇–centos" class="headerlink" title="安装篇–centos"></a>安装篇–centos</h2><p>可参考官方文档 <a href="https://docs.docker.com/install/linux/docker-ce/centos/">https://docs.docker.com/install/linux/docker-ce/centos/</a></p>
<h3 id="centos版本"><a href="#centos版本" class="headerlink" title="centos版本"></a>centos版本</h3><p>centos7 64位 内核3.10以上</p>
<h3 id="docker-安装前准备"><a href="#docker-安装前准备" class="headerlink" title="docker 安装前准备"></a>docker 安装前准备</h3><h4 id="卸载老版本"><a href="#卸载老版本" class="headerlink" title="卸载老版本"></a>卸载老版本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>


<h4 id="安装必要依赖包"><a href="#安装必要依赖包" class="headerlink" title="安装必要依赖包"></a>安装必要依赖包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure>

<h4 id="更换yum源"><a href="#更换yum源" class="headerlink" title="更换yum源"></a>更换yum源</h4><p>这里我们使用阿里云的，否则默认的官方地址的安装会非常慢</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<p>更新yum缓存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum makecache fast</span><br></pre></td></tr></table></figure>

<h3 id="安装Docker-CE"><a href="#安装Docker-CE" class="headerlink" title="安装Docker CE"></a>安装Docker CE</h3><p>CE指的是社区版，EE是企业版</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum -y install docker-ce</span><br></pre></td></tr></table></figure>

<h4 id="启动后台服务"><a href="#启动后台服务" class="headerlink" title="启动后台服务"></a>启动后台服务</h4><p>设置开机启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>
<p>启动docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<h4 id="建立docker用户组"><a href="#建立docker用户组" class="headerlink" title="建立docker用户组"></a>建立docker用户组</h4><p>建立docker组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br></pre></td></tr></table></figure>

<p>加入当前用户，并更新用户组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo usermod -aG docker <span class="variable">$USER</span></span><br><span class="line">$ newgrp docker</span><br></pre></td></tr></table></figure>


<h3 id="配置镜像加速器"><a href="#配置镜像加速器" class="headerlink" title="配置镜像加速器"></a>配置镜像加速器</h3><p>默认的镜像源，依然比较慢，这里我们依然采用阿里云的</p>
<p>查找路径：阿里云网站&#x3D;&#x3D;》登录&#x3D;&#x3D;》控制台&#x3D;&#x3D;》容器镜像服务&#x3D;&#x3D;》镜像中心&#x3D;&#x3D;》镜像加速器(centos)<br>新建daemon.json目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br></pre></td></tr></table></figure>

<p>配置daemon.json文件，仓库镜像地址每个人都不同，根据自己的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://******.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>重新加载配置文件，并重启docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<h3 id="测试运行docker"><a href="#测试运行docker" class="headerlink" title="测试运行docker"></a>测试运行docker</h3><p>测试hello-world，没有镜像会自动从仓库拉去，再运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run hello-world</span><br></pre></td></tr></table></figure>

<h2 id="常用命令篇"><a href="#常用命令篇" class="headerlink" title="常用命令篇"></a>常用命令篇</h2><p>所有命令，都可以通过下列命令去了解</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<p>其他命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container <span class="built_in">exec</span> -it containId /bin/bash <span class="comment">#进入容器</span></span><br><span class="line">$ docker ps -a  <span class="comment">#查看运行的容器</span></span><br><span class="line">$ docker stop container containId <span class="comment">#停容器</span></span><br><span class="line">$ docker <span class="built_in">rm</span> container containId  <span class="comment">#删除容器</span></span><br><span class="line">$ docker images <span class="comment">#查看当前docker的镜像</span></span><br><span class="line">$ docker rmi image imageId <span class="comment">#删除镜像</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql--数据库字段</title>
    <url>/2019/10/29/Mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5/</url>
    <content><![CDATA[<h2 id="数据库字段规范"><a href="#数据库字段规范" class="headerlink" title="数据库字段规范"></a>数据库字段规范</h2><h3 id="主键ID-（unsigned-int-自增）"><a href="#主键ID-（unsigned-int-自增）" class="headerlink" title="主键ID （unsigned int 自增）"></a>主键ID （unsigned int 自增）</h3><p>可存储0 ~ 4294967295之间，占4个字节（byte），32位；单表最大可存储42亿数据完全够用<br>相比 unsigned bigint完全用不上，占用空间又大，其实单表超过千万条数据，就应该分表了</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装Mysql</title>
    <url>/2019/09/18/docker%E5%AE%89%E8%A3%85mysql/</url>
    <content><![CDATA[<h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><p>默认拉取最新的稳定版本，我这里是mysql 8</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull mysql</span><br></pre></td></tr></table></figure>
<p>指定拉取版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull mysql:5.6</span><br></pre></td></tr></table></figure>

<h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run \</span><br><span class="line">    -p 3306:3306 \</span><br><span class="line">    -e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">    -v /docker/data/mysql/data:/var/lib/mysql:rw \</span><br><span class="line">    -v /docker/data/mysql/log:/var/log/mysql:rw \</span><br><span class="line">    -v /docker/data/mysql/config/my.cnf:/etc/mysql/my.cnf:rw \</span><br><span class="line">    -v /etc/localtime:/etc/localtime:ro \</span><br><span class="line">    --name mysql \</span><br><span class="line">    --restart=always \</span><br><span class="line">    -d mysql</span><br></pre></td></tr></table></figure>

<p>-p 表示端口映射，宿主机端口:容器端口<br>-e 表示设置环境变量 MYSQL_ROOT_PASSWORD是root用户的登陆密码<br>-v 表示挂载数据卷<br>-d 表示后台运行容器<br>–name 表示对容器重命名</p>
<p>注：-v 挂载的是到宿主机的文件夹，而my.cnf是个文件，会报如下错误:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Are you trying to mount a directory onto a file (or vice-versa)? Check <span class="keyword">if</span> the specified host path exists and is the expected <span class="built_in">type</span>.</span><br></pre></td></tr></table></figure>
<p>需要预在挂载目录建好该文件”&#x2F;docker&#x2F;data&#x2F;mysql&#x2F;config&#x2F;my.cnf”</p>
<p>这个文件怎么来呢，可以从如下步骤获得：</p>
<p>先简单run一个mysql_test</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run --name mysql_test -d mysql</span><br></pre></td></tr></table></figure>

<p>然后从这个mysql容器里拷贝到本地宿主机来，”b858438722c5”是mysql_test这个容器ID</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">cp</span> b858438722c5:/etc/mysql/my.cnf /docker/data/mysql/config/my.cnf</span><br></pre></td></tr></table></figure>

<p>最后删除这个容器即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">rm</span> -f b858438722c5</span><br></pre></td></tr></table></figure>

<h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it mysql /bin/bash</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo&#39;s theme next</title>
    <url>/2019/07/28/hexo-theme-next/</url>
    <content><![CDATA[<p>本博客采用hexo的Next主题，也是大部分hexo博客采用的主题之一。本文主要列举一些使用小技巧，更多使用说明可以参考<a href="http://theme-next.iissnan.com/getting-started.html">Next主题官网</a></p>
<span id="more"></span>

<h2 id="编辑功能"><a href="#编辑功能" class="headerlink" title="编辑功能"></a>编辑功能</h2><h3 id="增加“阅读全文”功能"><a href="#增加“阅读全文”功能" class="headerlink" title="增加“阅读全文”功能"></a>增加“阅读全文”功能</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">截断处加入如下：</span><br><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>

<h3 id="添加标签、分类"><a href="#添加标签、分类" class="headerlink" title="添加标签、分类"></a>添加标签、分类</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line">  - 标签1</span><br><span class="line">  - 标签2</span><br><span class="line"></span><br><span class="line">categories:</span><br><span class="line">  - 分类</span><br></pre></td></tr></table></figure>

<h2 id="第三方插件"><a href="#第三方插件" class="headerlink" title="第三方插件"></a>第三方插件</h2><h3 id="留言插件-gitTalk"><a href="#留言插件-gitTalk" class="headerlink" title="留言插件 gitTalk"></a>留言插件 gitTalk</h3>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot--log4j2配置学习</title>
    <url>/2019/10/02/log4j2%E9%85%8D%E7%BD%AE%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://michael728.github.io/2019/08/10/java-spring-boot-log4j2/">https://michael728.github.io/2019/08/10/java-spring-boot-log4j2/</a></p>
<p><a href="https://github.com/alibaba/druid/wiki/Druid%E4%B8%AD%E4%BD%BF%E7%94%A8log4j2%E8%BF%9B%E8%A1%8C%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA">https://github.com/alibaba/druid/wiki/Druid%E4%B8%AD%E4%BD%BF%E7%94%A8log4j2%E8%BF%9B%E8%A1%8C%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA</a></p>
<p><a href="https://www.cnblogs.com/xishuai/p/spring-boot-log4j2.html">https://www.cnblogs.com/xishuai/p/spring-boot-log4j2.html</a></p>
<p><a href="https://www.cnblogs.com/keeya/p/10101547.html">https://www.cnblogs.com/keeya/p/10101547.html</a></p>
<p><a href="http://dkylin.com/archives/2017/spring-boot-log4j2-config.html">http://dkylin.com/archives/2017/spring-boot-log4j2-config.html</a></p>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>log4j2</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Hexo</title>
    <url>/2019/07/28/hello-hexo/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is my very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="创建一篇文章"><a href="#创建一篇文章" class="headerlink" title="创建一篇文章"></a>创建一篇文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate 或者 hexo g</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="本地运行测试"><a href="#本地运行测试" class="headerlink" title="本地运行测试"></a>本地运行测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server 或者 hexo s</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="发布到远程服务器"><a href="#发布到远程服务器" class="headerlink" title="发布到远程服务器"></a>发布到远程服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy 或者 hexo d</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
<h3 id="清除本地缓存"><a href="#清除本地缓存" class="headerlink" title="清除本地缓存"></a>清除本地缓存</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#相对路径插入图片，图片放在source/images</span></span><br><span class="line">![图片名称](/images/pictureName.png)</span><br><span class="line"><span class="comment">#图片可以放在文章所在的目录中，需要先在hexo目录下的配置文件_config.yml中修改为post_asset_folder: true 执行命令$ hexo new article_name，在source/_posts中会生成文章article_name.md和同名文件夹article_name。将图片资源放在article_name文件夹中，文章就可以使用相对路径引用图片资源了。</span></span><br><span class="line">![图片名称](pictureName.png)</span><br><span class="line"><span class="comment">#网络图片引用</span></span><br><span class="line">![图片标签](图片网络地址)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hello elasticsearch</title>
    <url>/2021/04/05/hello-elasticsearch/</url>
    <content><![CDATA[<p>日常工作主要是基于elasticsearch的垂直领域搜索功能开发，这里打算出个专题介绍如何通过ES来打造一个完整的搜索。<br>由于ES版本更新比较快，目前在写博客的时候已经到了7.12.0，这里也采用最新的版本来介绍。<br>大概分为以下三个模块来学习：ES基础、搜索、生产实战、源码分析</p>
<h2 id="ES基础"><a href="#ES基础" class="headerlink" title="ES基础"></a>ES基础</h2><p>1、ES的安装和配置<br>&#x3D;&#x3D;&gt;<a href="https://yanhangr.github.io/2020/08/09/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85elasticsearch%E9%9B%86%E7%BE%A4/">使用docker安装elasticsearch集群</a><br>2、基本概念<br>mapping和setting<br>3、ES集群的查询和写入逻辑<br>4、query<br>5、aggregation<br>6、analysis<br>7、运维和监控</p>
<h2 id="ES搜索"><a href="#ES搜索" class="headerlink" title="ES搜索"></a>ES搜索</h2><p>1、ES插件开发(基于hanlp的分词插件)<br>2、智能纠错<br>3、联想词</p>
<h2 id="生产实战"><a href="#生产实战" class="headerlink" title="生产实战"></a>生产实战</h2><p>1、ES多活灾备<br>2、ES多种写入方式<br>3、基于Java注解的mapping生成工具<br>4、多集群多索引的通用写入查询功能<br>5、大数据量下的写入查询优化</p>
<h2 id="ES涉及的算法"><a href="#ES涉及的算法" class="headerlink" title="ES涉及的算法"></a>ES涉及的算法</h2><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>1、ES启动<br>2、ES threadPool<br>3、ES action</p>
]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>搜索</tag>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>使用docker安装elasticsearch集群</title>
    <url>/2020/08/09/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85elasticsearch%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><p>默认拉取最新的稳定版本，我这里指定7.12.0版本的ES集群</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull elasticsearch:7.12.0</span><br></pre></td></tr></table></figure>

<h2 id="虚机配置"><a href="#虚机配置" class="headerlink" title="虚机配置"></a>虚机配置</h2><h3 id="设置vm-max-map-count"><a href="#设置vm-max-map-count" class="headerlink" title="设置vm_max_map_count"></a>设置vm_max_map_count</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/sysctl.conf <span class="comment">#编辑sysctl.conf</span></span><br><span class="line">$ vm.max_map_count=262144 <span class="comment">#加入配置</span></span><br><span class="line">$ sysctl -p <span class="comment">#启用配置</span></span><br></pre></td></tr></table></figure>
<h3 id="disable-swapping"><a href="#disable-swapping" class="headerlink" title="disable swapping"></a>disable swapping</h3><p>设置缘由：<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/important-configuration-changes.html">官方文档</a><br>方法一：在elasticsearch.yml配置如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bootstrap.memory_lock: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>并添加以下两行到&#x2F;etc&#x2F;security&#x2F;limits.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ user soft memlock unlimited</span><br><span class="line">$ user hard memlock unlimited</span><br></pre></td></tr></table></figure>
<p>其中user为elasticsearch的启动用户</p>
<p>方法二：<br>修改&#x2F;etc&#x2F;fstab文件，在swap分区这行前加 # 禁用掉，保存退出</p>
<h2 id="docker配置文件"><a href="#docker配置文件" class="headerlink" title="docker配置文件"></a>docker配置文件</h2><p>创建 docker-compose.yml文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;2.2&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  es01:</span><br><span class="line">    image: elasticsearch:7.12.0</span><br><span class="line">    container_name: es01</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es01</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es02,es03</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">true</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms768m -Xmx768m&quot;</span></span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    volumes:</span><br><span class="line">      - ./node01/data:/usr/share/elasticsearch/data</span><br><span class="line">      - ./node01/logs:/usr/share/elasticsearch/logs</span><br><span class="line">      - ./node01/plugins:/usr/share/elasticsearch/plugins</span><br><span class="line">      - ./config:/usr/share/elasticsearch/config</span><br><span class="line">    ports:</span><br><span class="line">      - 9200:9200</span><br><span class="line">      - 9300:9300</span><br><span class="line">    networks:</span><br><span class="line">      - elastic</span><br><span class="line">  es02:</span><br><span class="line">    image: elasticsearch:7.12.0</span><br><span class="line">    container_name: es02</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es02</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es01,es03</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">true</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms768m -Xmx768m&quot;</span></span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    volumes:</span><br><span class="line">      - ./node02/data:/usr/share/elasticsearch/data</span><br><span class="line">      - ./node02/logs:/usr/share/elasticsearch/logs</span><br><span class="line">      - ./node02/plugins:/usr/share/elasticsearch/plugins</span><br><span class="line">      - ./config:/usr/share/elasticsearch/config</span><br><span class="line">    ports:</span><br><span class="line">      - 9201:9200</span><br><span class="line">      - 9301:9300</span><br><span class="line">    networks:</span><br><span class="line">      - elastic</span><br><span class="line">  es03:</span><br><span class="line">    image: elasticsearch:7.12.0</span><br><span class="line">    container_name: es03</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es03</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es01,es02</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">true</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms768m -Xmx768m&quot;</span></span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    volumes:</span><br><span class="line">      - ./node03/data:/usr/share/elasticsearch/data</span><br><span class="line">      - ./node03/logs:/usr/share/elasticsearch/logs</span><br><span class="line">      - ./node03/plugins:/usr/share/elasticsearch/plugins</span><br><span class="line">      - ./config:/usr/share/elasticsearch/config</span><br><span class="line">    ports:</span><br><span class="line">      - 9202:9200</span><br><span class="line">      - 9302:9300</span><br><span class="line">    networks:</span><br><span class="line">      - elastic</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  elastic:</span><br><span class="line">    driver: bridge</span><br></pre></td></tr></table></figure>
<p>注：<br>(1) ES_JAVA_OPTS(es堆内存设置)<br>宿主机内存大小的一半和31GB，取最小值<br>(2) volumes(挂载卷)<br>对data、logs、plugins、config重新挂载，其中config目录里面的文件可从docker镜像里面copy出来</p>
<h2 id="log配置"><a href="#log配置" class="headerlink" title="log配置"></a>log配置</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/logging.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.12/logging.html</a></p>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h2 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose stop</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/docker.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.12/docker.html</a><br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/configuring-tls-docker.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.12/configuring-tls-docker.html</a></p>
]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>基于scrapy的爬虫1--安装scrapy</title>
    <url>/2019/07/28/%E5%9F%BA%E4%BA%8Escrapy%E7%9A%84%E7%88%AC%E8%99%AB-1/</url>
    <content><![CDATA[<p>之前写过简单爬虫，主要用了BeautifulSoup4、request等模块。现在开始学习爬虫框架scrapy，作为记录使用，有错误欢迎反馈。<br>(ps:没开始写之前，简单用了一下，真的很好用啊)</p>
<span id="more"></span>


<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="基于python3-7开发（目前最新版本）"><a href="#基于python3-7开发（目前最新版本）" class="headerlink" title="基于python3.7开发（目前最新版本）"></a>基于python3.7开发（目前最新版本）</h3><h3 id="编辑器：pycharm-（习惯使用IDEA）"><a href="#编辑器：pycharm-（习惯使用IDEA）" class="headerlink" title="编辑器：pycharm （习惯使用IDEA）"></a>编辑器：pycharm （习惯使用IDEA）</h3><h3 id="功能库：anaconda（解决各种包的依赖问题）"><a href="#功能库：anaconda（解决各种包的依赖问题）" class="headerlink" title="功能库：anaconda（解决各种包的依赖问题）"></a>功能库：anaconda（解决各种包的依赖问题）</h3><h3 id="官方社区、文档-重要啊！！！-："><a href="#官方社区、文档-重要啊！！！-：" class="headerlink" title="官方社区、文档(重要啊！！！)："></a>官方社区、文档(重要啊！！！)：</h3><p><a href="https://github.com/search?q=scrapy">scrapy on GitHub</a><br><a href="https://docs.scrapy.org/en/1.6/">英文文档</a><br><a href="https://scrapy-chs.readthedocs.io/zh_CN/1.0/">中文文档</a></p>
<p>关于pycharm、anaconda的安装配置，网上教程比较多，这里不说了。所以这里从安装scrapy开始</p>
<h2 id="安装scrapy"><a href="#安装scrapy" class="headerlink" title="安装scrapy"></a>安装scrapy</h2><p>因为有anaconda，我们依赖各种包现在都很方便，接下来我们便使用它来安装</p>
<h3 id="查看是否已经安装scrapy"><a href="#查看是否已经安装scrapy" class="headerlink" title="查看是否已经安装scrapy"></a>查看是否已经安装scrapy</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda list scrapy</span><br></pre></td></tr></table></figure>

<h3 id="查询conda支持的scrapy版本"><a href="#查询conda支持的scrapy版本" class="headerlink" title="查询conda支持的scrapy版本"></a>查询conda支持的scrapy版本</h3><p>我的python3.7显示匹配的Scrapy v1.6版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda search scrapy</span><br></pre></td></tr></table></figure>

<h3 id="执行安装"><a href="#执行安装" class="headerlink" title="执行安装"></a>执行安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install scrapy </span><br></pre></td></tr></table></figure>
<p>选择“yes”，静待它安装完成，如果中途遇到网络不好，则继续执行这一步，conda会继续下载上次没有下载的包。</p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>scrapy</tag>
        <tag>python3</tag>
      </tags>
  </entry>
  <entry>
    <title>前端项目快速上手</title>
    <url>/2019/12/08/%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
    <content><![CDATA[<p>最近在做类百度文库系统，这次需要自己写前端….; 作为一枚后端开发工程师，为了搭建前端系统，这里快速学习一下可能会涉及到的前端技术。</p>
<h2 id="前端术语"><a href="#前端术语" class="headerlink" title="前端术语"></a>前端术语</h2><h4 id="前端三驾马车"><a href="#前端三驾马车" class="headerlink" title="前端三驾马车"></a>前端三驾马车</h4><p>html、css、js</p>
<p>html负责前端结构；css负责前端展现样式；js负责前端动态功能；<br>html是主体，装载各种dom元素；css用来装饰dom元素；javascript控制dom元素。<br>ES5&#x2F;ES6是指JS的ECMAScript，规定其语法的东西</p>
<p>参考文档<br>【讲html&#x2F;css、js】<a href="https://www.w3school.com.cn/h.asp">https://www.w3school.com.cn/h.asp</a><br>【讲js如何操作DOM】<a href="https://www.cnblogs.com/zxt-17862802783/p/7498790.html">https://www.cnblogs.com/zxt-17862802783/p/7498790.html</a><br>【js的两样东西ES和DOM】<a href="https://www.cnblogs.com/sunshinezjb/p/9248533.html">https://www.cnblogs.com/sunshinezjb/p/9248533.html</a></p>
<h4 id="node-js、npm、webpack"><a href="#node-js、npm、webpack" class="headerlink" title="node.js、npm、webpack"></a>node.js、npm、webpack</h4><p>node.js是js的运行环境；类比到jvm是Java的运行环境</p>
<p>npm是Node.js的包管理工具（package manager）</p>
<p>webpack是前端打包工具</p>
<h4 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h4><p>也即vue.js，前端开源框架，相同开源框架还有Angular、React。</p>
<p>因为国内对vue使用率较高，所以接下来以vue.js设计的技术来展开。</p>
<h2 id="vue涉及技术"><a href="#vue涉及技术" class="headerlink" title="vue涉及技术"></a>vue涉及技术</h2><p>vue-cli：vue脚手架，基于此可以快速搭建vue项目</p>
<p>vuex：全局状态管理框架</p>
<p>vue-router：路由</p>
<p>axios：http框架，和后端接口交互</p>
<p>element-ui ：基于vue的UI组件库，由饿了么开发；另外还有阿里的 ant-design-vue等组件库</p>
<h2 id="参考项目"><a href="#参考项目" class="headerlink" title="参考项目"></a>参考项目</h2><p>在GitHub&#x2F;Gitee 找到了两个开源项目，以此作为参考足以继续下面的文库前端开发</p>
<h3 id="vue-element-ui"><a href="#vue-element-ui" class="headerlink" title="vue-element-ui"></a>vue-element-ui</h3><p>源码地址：<br>GitHub：<a href="https://github.com/PanJiaChen/vue-element-admin">https://github.com/PanJiaChen/vue-element-admin</a><br>Gitee：<a href="https://gitee.com/panjiachen/vue-element-admin">https://gitee.com/panjiachen/vue-element-admin</a></p>
<p>参考文档：<br><a href="https://panjiachen.github.io/vue-element-admin-site/zh/guide/">https://panjiachen.github.io/vue-element-admin-site/zh/guide/</a></p>
<h3 id="mall-admin-web"><a href="#mall-admin-web" class="headerlink" title="mall-admin-web"></a>mall-admin-web</h3><p>源码地址：<br>GitHub：<a href="https://github.com/macrozheng/mall-admin-web">https://github.com/macrozheng/mall-admin-web</a><br>Gitee: <a href="https://gitee.com/macrozheng/mall-admin-web">https://gitee.com/macrozheng/mall-admin-web</a></p>
<p>参考文档：<br><a href="http://www.macrozheng.com/#/foreword/mall_foreword_01">http://www.macrozheng.com/#/foreword/mall_foreword_01</a></p>
<h2 id="基于vue-cli脚手架创建项目"><a href="#基于vue-cli脚手架创建项目" class="headerlink" title="基于vue-cli脚手架创建项目"></a>基于vue-cli脚手架创建项目</h2><h3 id="安裝vue-cli"><a href="#安裝vue-cli" class="headerlink" title="安裝vue-cli"></a>安裝vue-cli</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g @vue/cli</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure>

<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>我用的是 vue ui</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vue create my-project</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">vue ui</span><br></pre></td></tr></table></figure>

<p>插件安装选择</p>
<p><img src="/images/vue-cli.png"></p>
<p>1、router history or hash模式选择，这里我们选择history模式<br>参考文档<br><a href="https://www.cnblogs.com/youngly/p/9324608.html">https://www.cnblogs.com/youngly/p/9324608.html</a><br><a href="https://blog.csdn.net/Gabriel_wei/article/details/89631787">https://blog.csdn.net/Gabriel_wei/article/details/89631787</a></p>
<p>2、css预处理器选择<br>dart-sass和node-sass选择，这里我们选择的是node-sass，但好像dart-sass更好一点</p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>element-ui</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot--整合spring-security</title>
    <url>/2020/02/08/springboot-%E6%95%B4%E5%90%88spring-security/</url>
    <content><![CDATA[<p>spring security和shiro是两个专注于认证和授权的安全框架，因为在做的文库系统是基于springboot的，所以这里学习一下如何整合spring security</p>
<h2 id="基于角色的访问控制（RBAC-role-based-acess-control）"><a href="#基于角色的访问控制（RBAC-role-based-acess-control）" class="headerlink" title="基于角色的访问控制（RBAC role-based acess control）"></a>基于角色的访问控制（RBAC role-based acess control）</h2><p><a href="https://www.cnblogs.com/berandwaddle/p/11343824.html">https://www.cnblogs.com/berandwaddle/p/11343824.html</a></p>
<h3 id="账户锁定"><a href="#账户锁定" class="headerlink" title="账户锁定"></a>账户锁定</h3><p><a href="https://segmentfault.com/a/1190000012518537">https://segmentfault.com/a/1190000012518537</a></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.jianshu.com/p/5b9f1f4de88d">https://www.jianshu.com/p/5b9f1f4de88d</a>   </p>
<p><a href="https://www.cnblogs.com/xifengxiaoma/p/11106220.html">https://www.cnblogs.com/xifengxiaoma/p/11106220.html</a></p>
<p><a href="https://www.jianshu.com/p/d5ce890c67f7">https://www.jianshu.com/p/d5ce890c67f7</a></p>
<p><a href="https://www.cnblogs.com/felordcn/p/12142505.html">https://www.cnblogs.com/felordcn/p/12142505.html</a></p>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>spring security</tag>
      </tags>
  </entry>
  <entry>
    <title>我的文库系统-0</title>
    <url>/2019/08/18/%E6%88%91%E7%9A%84%E6%96%87%E5%BA%93%E7%B3%BB%E7%BB%9F-0/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>写这此之前，已经购买服务器、他人源代码搭建了一个文库系统，并已经上线（具体名字就不透漏了）。</p>
<p>文库主要是在做一个高等教育文库，面向大学生群体，特别是考研的学生，提供考研教育服务。</p>
<p>之前为了项目快速上线，直接买了一个文库系统，希望把有限的经历专注于内容和运营。</p>
<p>因为文库代码是编译版的，无法修改源码实现自己的功能，比较受限。所以，打算自己开发一个文库系统。</p>
<h2 id="文库功能"><a href="#文库功能" class="headerlink" title="文库功能"></a>文库功能</h2><p>文库功能嘛，对标百度文库。</p>
<p>自己写代码嘛，无法做到一蹴而就。从前端到后端，由0到1是个痛苦的过程，但是之后会慢慢好起来。</p>
<p>这里，我们把文库主要功能分为3期来完成。</p>
<p>先设定一定的开发期限，由于是只能在周末开发，当然周末也不一定完全专注于开发，先给自己设定一个目标。</p>
<p>“小步快跑，快速迭代，从不完美开始”</p>
<span id="more"></span>

<h3 id="一期功能"><a href="#一期功能" class="headerlink" title="一期功能"></a>一期功能</h3><p>文档的上传，转换，浏览，下载，也是核心功能。</p>
<p>deadline：2019-08-25 </p>
<h3 id="二期功能"><a href="#二期功能" class="headerlink" title="二期功能"></a>二期功能</h3><p>主要包括用户模块（注册、登录），简单后台管理模块，以及对应的前端开发。</p>
<p>deadline：2019-09-01</p>
<p>时间线：</p>
<h3 id="三期功能"><a href="#三期功能" class="headerlink" title="三期功能"></a>三期功能</h3><p>三期主要对文库功能的一个补充。比如第三方注册，用户组阅读、下载权限控制，水印，支付功能，搜索功能，文库的oss存储功能等等。</p>
<p>三期完成之后，接下来是一个不断完善的过程，这个时候基本上可以上线运营了。</p>
<p>deadline：2019-09-15</p>
<h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><p>操作系统：Windows 10</p>
<p>开发工具：Intellij IDEA</p>
<p>数据库：MySQL 8.0.13</p>
<p>Java SDK：Oracle JDK 1.8.191</p>
<h3 id="项目部署环境"><a href="#项目部署环境" class="headerlink" title="项目部署环境"></a>项目部署环境</h3><p>操作系统：Linux centos7</p>
<p>虚拟化技术：VMware + Docker</p>
<h3 id="项目管理工具"><a href="#项目管理工具" class="headerlink" title="项目管理工具"></a>项目管理工具</h3><p>项目构建：Maven</p>
<p>代码管理：GitHub</p>
<p>镜像管理：Docker Registry</p>
<h3 id="后台技术栈"><a href="#后台技术栈" class="headerlink" title="后台技术栈"></a>后台技术栈</h3><p>前期这里我只写能用到的技术，至于后面功能增强，分布式开发这些后面我们再补充。</p>
<p>核心框架：Spring Boot</p>
<p>文档转换队列：disruptor</p>
<p>ORM 框架：MyBatis</p>
<p>数据库连接池：Alibaba Druid</p>
<p>数据库缓存：Redis 和 RocksDB（方便单机环境）</p>
<p>分布式文件系统：Alibaba OSS</p>
<p>权限管理框架 spring security + jwt</p>
<h3 id="前端技术栈"><a href="#前端技术栈" class="headerlink" title="前端技术栈"></a>前端技术栈</h3><p>前端框架：NodeJS + Vue + Axios</p>
<p>前端模板：ElementUI</p>
<h3 id="文档转换"><a href="#文档转换" class="headerlink" title="文档转换"></a>文档转换</h3><pre><code>office --&gt; pdf --&gt; svg
</code></pre>
<p>Libreoffice(或Openoffice)用于将.doc、.ppt等office文档转PDF	</p>
<p>pdf2svg，用于将PDF转成svg矢量图片</p>
]]></content>
      <categories>
        <category>文库</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>基于scrapy的爬虫2--第一个小爬虫</title>
    <url>/2019/07/31/%E5%9F%BA%E4%BA%8Escrapy%E7%9A%84%E7%88%AC%E8%99%AB2-%E5%9F%BA%E4%BA%8Escrapy%E7%9A%84%E5%B0%8F%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>先放这里，明天继续写！</p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>scrapy</tag>
        <tag>python3</tag>
      </tags>
  </entry>
  <entry>
    <title>我的文库系统--用户角色设计</title>
    <url>/2020/02/09/%E6%88%91%E7%9A%84%E6%96%87%E5%BA%93%E7%B3%BB%E7%BB%9F-%E7%94%A8%E6%88%B7%E8%A7%92%E8%89%B2%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>网站用户角色，应该分为前台用户角色和后台用户角色，所以设计数据库表和代码之前，先把业务背景思考清楚。</p>
<h2 id="前台角色"><a href="#前台角色" class="headerlink" title="前台角色"></a>前台角色</h2><p>现在参考discuz的设计和百度文库的业务场景，考拉文库前台用户可能涉及的角色。</p>
<p>在考虑角色之前，我们先把角色权限弄清楚，管理通过自定义角色，然后再对该角色赋予不同权限即可。</p>
<p>如下权限包括但不限于，之后想到再来补充：</p>
<p>浏览篇：<br>是否可以浏览文档（对应文档等级）、是否限制浏览文档页数</p>
<p>下载篇<br>是否可以下载文档、是否可以免积分下载文档</p>
<h2 id="后台管理员角色"><a href="#后台管理员角色" class="headerlink" title="后台管理员角色"></a>后台管理员角色</h2><p>网站管理需要多个角色，比如运营管理员，用户管理员，交易管理员等等</p>
]]></content>
      <categories>
        <category>文库</category>
      </categories>
  </entry>
  <entry>
    <title>我的文库系统（1）-- 文档在线预览调研</title>
    <url>/2019/09/23/%E6%88%91%E7%9A%84%E6%96%87%E5%BA%93%E7%B3%BB%E7%BB%9F%EF%BC%881%EF%BC%89--%20%E6%96%87%E6%A1%A3%E5%9C%A8%E7%BA%BF%E9%A2%84%E8%A7%88%E8%B0%83%E7%A0%94/</url>
    <content><![CDATA[<h2 id="商业解决方案"><a href="#商业解决方案" class="headerlink" title="商业解决方案"></a>商业解决方案</h2><p>永中文档  <a href="http://www.yozodcs.com/">http://www.yozodcs.com/</a><br>office365 <a href="https://officeweb365.com/Default/Viewview">https://officeweb365.com/Default/Viewview</a><br>IDOCV     <a href="https://www.idocv.com/examples.html">https://www.idocv.com/examples.html</a><br>一般都是参与文档底层解析，然后再去展示</p>
<h2 id="开源解决方案"><a href="#开源解决方案" class="headerlink" title="开源解决方案"></a>开源解决方案</h2><p>kkFileView <a href="https://gitee.com/kekingcn/file-online-preview/wikis/pages">https://gitee.com/kekingcn/file-online-preview/wikis/pages</a></p>
]]></content>
      <categories>
        <category>文库</category>
      </categories>
  </entry>
  <entry>
    <title>文库上传转换功能实现</title>
    <url>/2019/10/05/%E6%96%87%E5%BA%93%E4%B8%8A%E4%BC%A0%E8%BD%AC%E6%8D%A2%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="文档实现预览功能的步骤"><a href="#文档实现预览功能的步骤" class="headerlink" title="文档实现预览功能的步骤"></a>文档实现预览功能的步骤</h2><p>1、前端用户上传文库，作MD5校验，去数据库判断是否存在相同文档；若没有，进入步骤2。</p>
<p>2、如若不存在相同文档，则把文档上传到临时目录，且数据库插入一条原始文档数据<br>  （插入数据包含，文件名称，文件大小，文件类型、原文件临时目录的路径，唯一ID–》UUID和文件的MD5)</p>
<p>  并向前端返回唯一ID，以便绑定“售价、转换页数、关键词”这些信息，唯一ID也可以由前端生成传给后端。唯一ID可以是数据库主键，可以是UUID，也可以是MD5，这两者基本上都可以保持唯一性。</p>
<p>3、生产者：数据（包含“售价、转换页数、关键词”人为定义的字段）再次插入，通过监听数据库的插入方法，把该条数据加入文档转换队列（队列使用disruptor）</p>
<p>数据库文档状态为&#x3D;&#x3D;》转换中</p>
<p>4、消费者一：对文档进行处理（调用libreoffice,先转转换为PDF,然后再转成PNG或者SVG，其他功能还有加水印等)<br>4.1 如果为PDF，则进行下一步；不是PDF则转为PDF<br>4.2 PDF根据转换要求转成svg，比如多少页<br>4.3 删除中间态文档</p>
<p>5、消费者二：消费者一完成，无论结果如何，更新原来已经插入数据库的那条数据。<br>数据库文档状态&#x3D;&#x3D;》装换失败或者为转换成功</p>
<p>6、最终根据数据库里面的数据，状态、规则限定来决定是否对用户展示此文档。这里是文档的展示状态：1：审核中，2：自动审核成功，3：人工审核成功，4：特权，无需审核</p>
<h2 id="转换核心步骤"><a href="#转换核心步骤" class="headerlink" title="转换核心步骤"></a>转换核心步骤</h2><h3 id="OFFICE转PDF"><a href="#OFFICE转PDF" class="headerlink" title="OFFICE转PDF"></a>OFFICE转PDF</h3><h3 id="PDF转图片"><a href="#PDF转图片" class="headerlink" title="PDF转图片"></a>PDF转图片</h3><p>PDFBOX(<a href="https://pdfbox.apache.org/">https://pdfbox.apache.org/</a>)<br>&#x3D;&#x3D;》提取页码总数、提取文本、转成png或jpg</p>
<p>问题：<br>1、若某个文本过大，会撑爆内存？需要设置合适范围，不然mysql也写不进去<br>mysql中text 最大长度为65,535(2的16次方–1)字符的TEXT列<br>MEDIUMTEXT 最大长度为16,777,215<br>LONGTEXT 最大长度为4,294,967,295</p>
<p>解决方案：<br>PDFTextStripper 可以限定提取页码范围、数量</p>
<p>提取的文本分表处理，尽量少字段，可以冗余字段，主要在列表页展示<br>涉及字段：文档ID、名称、描述、关键词</p>
<h3 id="PDF转SVG"><a href="#PDF转SVG" class="headerlink" title="PDF转SVG"></a>PDF转SVG</h3><p>1、pdf转图片</p>
<p>(1)PDFBOX<br><a href="https://pdfbox.apache.org/">https://pdfbox.apache.org/</a><br>提取页码、提取文本、转成png或jpg</p>
<p>提取文本时的问题<br>1、若某个文本过大，会不会撑爆内存？建议设置合适范围，不然mysql也写不进去<br>mysql中text 最大长度为65,535(2的16次方–1)字符的TEXT列。<br>MEDIUMTEXT最大长度为16,777,215。<br>LONGTEXT最大长度为4,294,967,295<br>PDFTextStripper 可以限定</p>
<p>2、若第一页为图片，即使接下来都是文字，也可以提取文字，但是图片包含的东西是未知的。</p>
<p>数据库字段<br>1、增加 文件夹前缀，文件夹相对路径，转换完成时间，转换所处状态，转换失败原因</p>
<p>测试case<br>1、上传“文件x”，不存在相同文档，然后进入审核阶段；此时再有人上传”文件X”,也应该提醒已经存在相同文档！<br>看我的文库如何解决</p>
<p>后续优化问题<br>1、优化disruptor 队列处理</p>
]]></content>
      <categories>
        <category>文库</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>disruptor</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
</search>
