<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>mac快捷键</title>
    <url>/mac%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h2 id="截屏"><a href="#截屏" class="headerlink" title="截屏"></a>截屏</h2><p>打开截录屏工具  Shift+Command+5</p>
<p>选择截屏  Shift+Command+4</p>
<p><a href="https://support.apple.com/zh-cn/guide/mac-help/mh26782/mac">https://support.apple.com/zh-cn/guide/mac-help/mh26782/mac</a></p>
<h2 id="切换输入法"><a href="#切换输入法" class="headerlink" title="切换输入法"></a>切换输入法</h2><p>Control + 空格</p>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>mac软件安装</title>
    <url>/mac%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>mbp(m1pro 10核+32g+512g )，安装一些常用的软件，主要用于日常学习及软件开发</p>
<h2 id="clashX"><a href="#clashX" class="headerlink" title="clashX"></a>clashX</h2><p>科学上网工具</p>
<p>下载安装地址 <a href="https://github.com/yichengchen/clashX/releases">https://github.com/yichengchen/clashX/releases</a></p>
<h2 id="homebrew"><a href="#homebrew" class="headerlink" title="homebrew"></a>homebrew</h2><p>mac软件安装及管理利器，它远比AppStore强大，官方文档 ： <a href="https://docs.brew.sh./">https://docs.brew.sh。</a></p>
<p>几个重要功能：</p>
<p>1、安装源来自官网；</p>
<p>2、可以安装图形界面软件，这点类似appstore，但是不在App Store内的软件用它也可以安装；</p>
<p>3、安装非图形界面软件，比如jdk、maven这些，而且它会自动安装依赖。</p>
<p>安装方法：由于已经科学上网，所以使用官方文档安装Homebrew即可，或者使用国内镜像安装。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">export</span> HOMEBREW_BREW_GIT_REMOTE=<span class="string">&quot;...&quot;</span>  <span class="comment"># put your Git mirror of Homebrew/brew here</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">export</span> HOMEBREW_CORE_GIT_REMOTE=<span class="string">&quot;...&quot;</span>  <span class="comment"># put your Git mirror of Homebrew/homebrew-core here</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>安装成功之后，切换为国内镜像，这里我使用的是清华镜像。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">替换各个源</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git -C <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/core)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/cask)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zsh 替换 brew bintray 镜像</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.zshrc</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">source</span> ~/.zshrc</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">刷新源</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew update</span></span><br></pre></td></tr></table></figure>

<p>homebrew常用命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#命令查看</span></span><br><span class="line">$ brew <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询可安装软件</span></span><br><span class="line">$ brew search &lt;xxx&gt;</span><br><span class="line">或者访问 https://formulae.brew.sh 查看</span><br><span class="line"><span class="comment">#禁止自动更新已安装软件</span></span><br><span class="line">$ vi ~/.zshrc</span><br><span class="line"><span class="built_in">export</span> HOMEBREW_NO_AUTO_UPDATE=<span class="literal">true</span> <span class="comment">#禁止自动更新</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看已安装依赖</span></span><br><span class="line">$ brew deps --installed --tree</span><br><span class="line"></span><br><span class="line"><span class="comment">#清除缓存及过期软件</span></span><br><span class="line">$ brew cleanup</span><br><span class="line">有部分缓存仍然清除不掉，可以到目录下手动清除 ～/Library/Caches/homebrew</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看安装到依赖关系</span></span><br><span class="line">$ brew deps -n maven</span><br><span class="line">n表示几层依赖</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装去除依赖</span></span><br><span class="line"><span class="comment">#假设安装maven，不再安装依赖jdk</span></span><br><span class="line">$ brew install --ignore-dependencies maven</span><br></pre></td></tr></table></figure>

<p>brew install 安装指定版本，注意提前禁止自动更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 因idea安装版本为2021.2，版本兼容，maven安装需要安装maven 3.8.1及之前的版本</span></span><br><span class="line"><span class="comment"># 参考文档 https://shockerli.net/post/homebrew-install-formula-specific-version/</span></span><br><span class="line"><span class="comment">##1.获得其在 homebrew/core 仓库的文件路径：Formula/maven.rb</span></span><br><span class="line">$ brew info maven</span><br><span class="line">==&gt; maven: stable 3.8.1 (bottled)</span><br><span class="line">Java-based project management</span><br><span class="line">https://maven.apache.org/</span><br><span class="line">Conflicts with:</span><br><span class="line">  mvnvm (because also installs a <span class="string">&#x27;mvn&#x27;</span> executable)</span><br><span class="line">Not installed</span><br><span class="line">From: https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/maven.rb</span><br><span class="line">License: Apache-2.0</span><br><span class="line"></span><br><span class="line"><span class="comment">##2.查看 homebrew/core 的仓库路径：</span></span><br><span class="line">$ brew tap-info homebrew/core </span><br><span class="line">homebrew/core: 2 commands, 5687 formulae</span><br><span class="line">/opt/homebrew/Library/Taps/homebrew/homebrew-core (6,039 files, 556.7MB)</span><br><span class="line">From: https://github.com/Homebrew/homebrew-core</span><br><span class="line"></span><br><span class="line"><span class="comment">##3.切换为homebrew/core 的仓库路径</span></span><br><span class="line">$ <span class="built_in">cd</span> /opt/homebrew/Library/Taps/homebrew/homebrew-core</span><br><span class="line"></span><br><span class="line"><span class="comment">##4.找到你需要 Checkout 至的 Commit</span></span><br><span class="line">$ git <span class="built_in">log</span> -p -- Formula/maven.rb | grep -e ^commit -e <span class="string">&#x27;url &quot;http&#x27;</span></span><br><span class="line">commit 225b9036c0db7c4439de7ee540a07baa481dc2ae</span><br><span class="line">commit fea44adff90c1b485fb2c109dbb77f012d9e955f</span><br><span class="line">commit 1a09b5ca3336d2b0b8ed695f503e4e79832411ed</span><br><span class="line">commit 16dcbd7cdd50ee3639f19c190c956a0fc00979ed</span><br><span class="line">-  url <span class="string">&quot;https://www.apache.org/dyn/closer.lua?path=maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz&quot;</span></span><br><span class="line">+  url <span class="string">&quot;https://www.apache.org/dyn/closer.lua?path=maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.tar.gz&quot;</span></span><br><span class="line">     url <span class="string">&quot;https://maven.apache.org/download.cgi&quot;</span></span><br><span class="line"><span class="comment">##5.切换分支到3.8.1版本,注意+ 代表新增 - 代表移除</span></span><br><span class="line">$ git checkout fea44adff90c1b485fb2c109dbb77f012d9e955f</span><br><span class="line">.....</span><br><span class="line">HEAD is now at fea44adff90 maven: add 3.8.1 bottle.</span><br><span class="line"></span><br><span class="line"><span class="comment">##6.安装对应版本</span></span><br><span class="line">$ brew install --ignore-dependencies maven</span><br><span class="line"></span><br><span class="line"><span class="comment">##7.切回master分支</span></span><br><span class="line">$ git checkout master</span><br></pre></td></tr></table></figure>

<p>下面绝大部分软件的安装均可以使用homebrew来完成安装，如果需要特殊安装会特别标注</p>
<h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><p>用默认的safari，感觉比chrome省电</p>
<h2 id="productivity-software"><a href="#productivity-software" class="headerlink" title="productivity software"></a>productivity software</h2><ol>
<li>alfred  快速检索</li>
<li>rectangle 分屏软件</li>
</ol>
<h2 id="dev-env"><a href="#dev-env" class="headerlink" title="dev-env"></a>dev-env</h2><ol>
<li><p>jdk 1.8</p>
<p>Apple Silicon安装指定版本jdk </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ brew install --cask homebrew/cask-versions/zulu8</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置环境变量</span></span><br><span class="line">$ vi ～/.zshrc </span><br><span class="line">$ <span class="built_in">export</span> JAVA_HOME=$(/usr/libexec/java_home -v1.8)</span><br><span class="line">$ <span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
</li>
<li><p>postman</p>
<p>接口测试软件</p>
</li>
<li><p>intellij-idea-ce</p>
<p>社区版idea</p>
</li>
<li><p>maven</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#maven安装依赖jdk，这里忽略依赖安装</span></span><br><span class="line">$ brew install --ignore-dependencies maven</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker入门</title>
    <url>/Docker/</url>
    <content><![CDATA[<h2 id="概念篇"><a href="#概念篇" class="headerlink" title="概念篇"></a>概念篇</h2><p>Docker 面向对象</p>
<h3 id="镜像（Image）"><a href="#镜像（Image）" class="headerlink" title="镜像（Image）"></a>镜像（Image）</h3><p>类比对象，包含一整套Ubuntu 16.04 最小系统的 root 文件系统</p>
<h3 id="容器（Container）"><a href="#容器（Container）" class="headerlink" title="容器（Container）"></a>容器（Container）</h3><p>类比实体类，即镜像运行的实体<br>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。<br>所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。</p>
<h3 id="仓库（Repository）"><a href="#仓库（Repository）" class="headerlink" title="仓库（Repository）"></a>仓库（Repository）</h3><p>保存镜像的地方，有大量优质官方镜像</p>
<span id="more"></span>

<h2 id="安装篇–centos"><a href="#安装篇–centos" class="headerlink" title="安装篇–centos"></a>安装篇–centos</h2><p>可参考官方文档 <a href="https://docs.docker.com/install/linux/docker-ce/centos/">https://docs.docker.com/install/linux/docker-ce/centos/</a></p>
<h3 id="centos版本"><a href="#centos版本" class="headerlink" title="centos版本"></a>centos版本</h3><p>centos7 64位 内核3.10以上</p>
<h3 id="docker-安装前准备"><a href="#docker-安装前准备" class="headerlink" title="docker 安装前准备"></a>docker 安装前准备</h3><h4 id="卸载老版本"><a href="#卸载老版本" class="headerlink" title="卸载老版本"></a>卸载老版本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>


<h4 id="安装必要依赖包"><a href="#安装必要依赖包" class="headerlink" title="安装必要依赖包"></a>安装必要依赖包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure>

<h4 id="更换yum源"><a href="#更换yum源" class="headerlink" title="更换yum源"></a>更换yum源</h4><p>这里我们使用阿里云的，否则默认的官方地址的安装会非常慢</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<p>更新yum缓存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum makecache fast</span><br></pre></td></tr></table></figure>

<h3 id="安装Docker-CE"><a href="#安装Docker-CE" class="headerlink" title="安装Docker CE"></a>安装Docker CE</h3><p>CE指的是社区版，EE是企业版</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum -y install docker-ce</span><br></pre></td></tr></table></figure>

<h4 id="启动后台服务"><a href="#启动后台服务" class="headerlink" title="启动后台服务"></a>启动后台服务</h4><p>设置开机启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>
<p>启动docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<h4 id="建立docker用户组"><a href="#建立docker用户组" class="headerlink" title="建立docker用户组"></a>建立docker用户组</h4><p>建立docker组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br></pre></td></tr></table></figure>

<p>加入当前用户，并更新用户组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo usermod -aG docker <span class="variable">$USER</span></span><br><span class="line">$ newgrp docker</span><br></pre></td></tr></table></figure>


<h3 id="配置镜像加速器"><a href="#配置镜像加速器" class="headerlink" title="配置镜像加速器"></a>配置镜像加速器</h3><p>默认的镜像源，依然比较慢，这里我们依然采用阿里云的</p>
<p>查找路径：阿里云网站&#x3D;&#x3D;》登录&#x3D;&#x3D;》控制台&#x3D;&#x3D;》容器镜像服务&#x3D;&#x3D;》镜像中心&#x3D;&#x3D;》镜像加速器(centos)<br>新建daemon.json目录</p>
<p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br></pre></td></tr></table></figure>

<p>配置daemon.json文件，仓库镜像地址每个人都不同，根据自己的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://******.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>重新加载配置文件，并重启docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<h3 id="测试运行docker"><a href="#测试运行docker" class="headerlink" title="测试运行docker"></a>测试运行docker</h3><p>测试hello-world，没有镜像会自动从仓库拉去，再运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run hello-world</span><br></pre></td></tr></table></figure>

<h2 id="常用命令篇"><a href="#常用命令篇" class="headerlink" title="常用命令篇"></a>常用命令篇</h2><p>所有命令，都可以通过下列命令去了解</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<p>其他命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container <span class="built_in">exec</span> -it &lt;containId&gt; bash <span class="comment">#进入容器</span></span><br><span class="line">$ docker ps -a  <span class="comment">#查看运行的容器</span></span><br><span class="line">$ docker stop container containId <span class="comment">#停容器</span></span><br><span class="line">$ docker <span class="built_in">rm</span> containId  <span class="comment">#删除容器</span></span><br><span class="line">$ docker images <span class="comment">#查看当前docker的镜像</span></span><br><span class="line">$ docker rmi imageId <span class="comment">#删除镜像</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker-compose"></a>Docker-compose</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">切换到</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker-compose up</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS安装lima-docker</title>
    <url>/MacOS%E5%AE%89%E8%A3%85lima-docker/</url>
    <content><![CDATA[<p>系统简介：Apple Silicon(M1pro)  macOS monterey 12.6   32g内存</p>
<h3 id="安装方案"><a href="#安装方案" class="headerlink" title="安装方案"></a>安装方案</h3><p>在macOS使用docker，大概有3种方案</p>
<h4 id="安装Linux虚机再安装docker"><a href="#安装Linux虚机再安装docker" class="headerlink" title="安装Linux虚机再安装docker"></a>安装Linux虚机再安装docker</h4><p>在mac安装虚机一般使用Parallel Desktop，然后安装liunx虚机之后再去安装docker，</p>
<p>不过Parallel Desktop是付费软件。</p>
<h4 id="docker-desktop"><a href="#docker-desktop" class="headerlink" title="docker desktop"></a>docker desktop</h4><p>使用homebrew安装 brew install docker。据说，docker desktop占用资源较多，这里我们先不考虑</p>
<h4 id="基于lima使用docker"><a href="#基于lima使用docker" class="headerlink" title="基于lima使用docker"></a>基于lima使用docker</h4><p>Lima本质上是一个基于<a href="https://www.qemu.org/">QEMU</a>的Linux虚拟机解决方案</p>
<h3 id="基于lima安装docker"><a href="#基于lima安装docker" class="headerlink" title="基于lima安装docker"></a>基于lima安装docker</h3><h4 id="安装lima"><a href="#安装lima" class="headerlink" title="安装lima"></a>安装lima</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew install lima</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装期间因缺少依赖会报错，使用brew install安装即可</span></span><br><span class="line">Error: No such file or directory @ rb_sysopen - /Users/yanhangr/Library/Caches/Homebrew/downloads/64c0acb2789c8720a31321e4d9452be60a04e728738e0c4d2bd74c4d26e847d4--libssh-0.10.0.arm64_monterey.bottle.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew install libssh</span></span><br></pre></td></tr></table></figure>

<h4 id="启动lima"><a href="#启动lima" class="headerlink" title="启动lima"></a>启动lima</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">limactl start --list-templates      <span class="comment"># 查看模板列表</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> /opt/homebrew/share/lima/examples <span class="comment">#模板具体配置</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">limactl start --name=default template://default</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">选择执行创建一个default的实例，lima会自动下载vm镜像和启动虚机</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建成功会看到 INFO[0065] READY. Run `lima` to open the shell.</span>  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">limactl list                        <span class="comment"># 查看实例运行状态</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">limactl copy default:/etc/ dst:/etc <span class="comment"># 跨实例复制文件</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">limactl stop default</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">limactl delete default</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">limactl prune <span class="comment">#清缓存,即删除目录</span></span></span><br></pre></td></tr></table></figure>

<h4 id="虚机内对容器操作"><a href="#虚机内对容器操作" class="headerlink" title="虚机内对容器操作"></a>虚机内对容器操作</h4><p>lima nerdctl是一个组合命令，前半段lima代表虚拟机层面的操作，其实lima是完整命令limactl shell default的简写，这段命令的含义是在虚拟机”default”中执行命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lima <span class="comment">#执行进入虚机</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nerdctl ps <span class="comment">#查看镜像</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nerdctl <span class="built_in">exec</span> -it &lt;<span class="built_in">id</span>&gt; /bin/bash <span class="comment">#进入容器</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">不进入虚机执行</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lima nerdctl ps</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lima nerdctl -it &lt;<span class="built_in">id</span>&gt; /bin/bash</span></span><br></pre></td></tr></table></figure>

<h4 id="基于lima安装docker-1"><a href="#基于lima安装docker-1" class="headerlink" title="基于lima安装docker"></a>基于lima安装docker</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">limactl start --name=docker template://docker</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">limactl shell docker <span class="comment">#进入虚机，然后使用docker命令即可</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker ps <span class="comment">#这里可以使用docker正常命令</span></span></span><br><span class="line"></span><br><span class="line">//启动停止docker</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">limactl stop docker</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">limactl start docker</span></span><br><span class="line"></span><br><span class="line">//docker-compose 相关命令</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker compose up <span class="comment">#启动镜像</span></span>    </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker compose up -d <span class="comment">#启动并在后台运行</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker compose down <span class="comment">#关闭镜像</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">doker compose down -v <span class="comment">#关闭并删除镜像</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="配置lima-docker镜像加速"><a href="#配置lima-docker镜像加速" class="headerlink" title="配置lima docker镜像加速"></a>配置lima docker镜像加速</h4><p>两种方式都没有配置生效。@todo</p>
<p>1、进入lima-docker之后，通过修改&#x2F;etc&#x2F;docker&#x2F;daemon.json的方式修改没有生效</p>
<p>2、通过container的方式配置也没有生效，参考文档 </p>
<p><a href="https://github.com/containerd/containerd/blob/main/docs/hosts.md">https://github.com/containerd/containerd/blob/main/docs/hosts.md</a></p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p>1、<a href="https://github.com/lima-vm/lima#getting-started%EF%BC%88%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%EF%BC%89">https://github.com/lima-vm/lima#getting-started（官方文档）</a></p>
<p>2、<a href="https://chennima.github.io/lima-alternative-docker-desktop-for-mac">https://chennima.github.io/lima-alternative-docker-desktop-for-mac</a></p>
<p>3、<a href="https://dockerbook.tw/docs/alternatives/lima/">https://dockerbook.tw/docs/alternatives/lima/</a></p>
<p>4、<a href="https://z.itpub.net/article/detail/FE826C8D74DACC49C1F8B52EB0CD9A5D">https://z.itpub.net/article/detail/FE826C8D74DACC49C1F8B52EB0CD9A5D</a></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装Mysql</title>
    <url>/docker%E5%AE%89%E8%A3%85mysql/</url>
    <content><![CDATA[<p>拉取镜像</p>
<p>指定拉取版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull mysql:8.0</span><br></pre></td></tr></table></figure>

<h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/share</span><br><span class="line">$ <span class="built_in">mkdir</span> docker/mysql8.0</span><br><span class="line">$ <span class="built_in">cd</span> docker/mysql8.0</span><br><span class="line">$ <span class="built_in">mkdir</span> -p docker/mysql8.0/data</span><br><span class="line">$ <span class="built_in">mkdir</span> -p docker/mysql8.0/log</span><br><span class="line">$ <span class="built_in">mkdir</span> -p docker/mysql8.0/config</span><br><span class="line">$ docker run \</span><br><span class="line">    -p 3306:3306 \</span><br><span class="line">    -e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">    -v /docker/mysql8.0/data:/var/lib/mysql:rw \</span><br><span class="line">    -v /docker/mysql8.0/log:/var/log/mysql:rw \</span><br><span class="line">    -v /docker/mysql8.0/config/my.cnf:/etc/my.cnf:rw \</span><br><span class="line">    -v /etc/localtime:/etc/localtime:ro \</span><br><span class="line">    --name mysql \</span><br><span class="line">    --restart=always \</span><br><span class="line">    -d</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-p 表示端口映射，宿主机端口:容器端口</span><br><span class="line">-e 表示设置环境变量 MYSQL_ROOT_PASSWORD是root用户的登陆密码</span><br><span class="line">-v 表示挂载数据卷</span><br><span class="line">-d 表示后台运行容器</span><br><span class="line">--restart=always 表示开机自动启动</span><br><span class="line">--name 表示对容器重命名</span><br></pre></td></tr></table></figure>
<p>注：-v 挂载的是到宿主机的文件夹，而my.cnf是个文件，会报如下错误:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Are you trying to mount a directory onto a file (or vice-versa)? Check <span class="keyword">if</span> the specified host path exists and is the expected <span class="built_in">type</span>.</span><br></pre></td></tr></table></figure>
<p>需要预在挂载目录建好该文件”&#x2F;docker&#x2F;data&#x2F;mysql&#x2F;config&#x2F;my.cnf”</p>
<p>这个文件怎么来呢，可以从如下步骤获得：</p>
<p>先简单run一个mysql_test</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -e MYSQL_ROOT_PASSWORD=123456 --name mysql_test -d mysql</span><br></pre></td></tr></table></figure>

<p>然后从这个mysql容器里拷贝到本地宿主机来，”b858438722c5”是mysql_test这个容器ID</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">cp</span> b858438722c5:/etc/my.cnf /docker/mysql8.0/config</span><br></pre></td></tr></table></figure>

<p>最后删除这个容器即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">rm</span> -f b858438722c5</span><br></pre></td></tr></table></figure>

<h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it mysql /bin/bash</span><br></pre></td></tr></table></figure>

<p>Docker-compose.yml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;2.2&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  mysql:</span><br><span class="line">    image:arm64v8/mysql:8.0</span><br><span class="line">    container_name: mysql</span><br><span class="line">    environment:</span><br><span class="line">    	- MYSQL_ROOT_PASSWORD=123456</span><br><span class="line">    volumes:</span><br><span class="line">    	- /docker/mysql8.0/data:/var/lib/mysql:rw \</span><br><span class="line">    	- /docker/mysql8.0/log:/var/log/mysql:rw \</span><br><span class="line">    	- /docker/mysql8.0/config/my.cnf:/etc/my.cnf:rw \</span><br><span class="line">    	- /etc/localtime:/etc/localtime:ro \</span><br><span class="line">    ports:</span><br><span class="line">   		- 3306:3306</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>使用docker安装elasticsearch集群</title>
    <url>/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85elasticsearch%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><p>默认拉取最新的稳定版本，我这里指定7.12.0版本的ES集群</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull elasticsearch:7.12.0</span><br></pre></td></tr></table></figure>

<h2 id="虚机配置"><a href="#虚机配置" class="headerlink" title="虚机配置"></a>虚机配置</h2><h3 id="设置vm-max-map-count"><a href="#设置vm-max-map-count" class="headerlink" title="设置vm_max_map_count"></a>设置vm_max_map_count</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/sysctl.conf <span class="comment">#编辑sysctl.conf</span></span><br><span class="line">$ vm.max_map_count=262144 <span class="comment">#加入配置</span></span><br><span class="line">$ sysctl -p <span class="comment">#启用配置</span></span><br></pre></td></tr></table></figure>
<h3 id="disable-swapping"><a href="#disable-swapping" class="headerlink" title="disable swapping"></a>disable swapping</h3><p>设置缘由：<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/important-configuration-changes.html">官方文档</a><br>方法一：在elasticsearch.yml配置如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bootstrap.memory_lock: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>并添加以下两行到&#x2F;etc&#x2F;security&#x2F;limits.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ user soft memlock unlimited</span><br><span class="line">$ user hard memlock unlimited</span><br></pre></td></tr></table></figure>
<p>其中user为elasticsearch的启动用户</p>
<p>方法二：<br>修改&#x2F;etc&#x2F;fstab文件，在swap分区这行前加 # 禁用掉，保存退出</p>
<h2 id="docker配置文件"><a href="#docker配置文件" class="headerlink" title="docker配置文件"></a>docker配置文件</h2><p>创建 docker-compose.yml文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;2.2&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  es01:</span><br><span class="line">    image: elasticsearch:7.12.0</span><br><span class="line">    container_name: es01</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es01</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es02,es03</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">true</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms768m -Xmx768m&quot;</span></span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    volumes:</span><br><span class="line">      - ./node01/data:/usr/share/elasticsearch/data</span><br><span class="line">      - ./node01/logs:/usr/share/elasticsearch/logs</span><br><span class="line">      - ./node01/plugins:/usr/share/elasticsearch/plugins</span><br><span class="line">      - ./config:/usr/share/elasticsearch/config</span><br><span class="line">    ports:</span><br><span class="line">      - 9200:9200</span><br><span class="line">      - 9300:9300</span><br><span class="line">    networks:</span><br><span class="line">      - elastic</span><br><span class="line">  es02:</span><br><span class="line">    image: elasticsearch:7.12.0</span><br><span class="line">    container_name: es02</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es02</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es01,es03</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">true</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms768m -Xmx768m&quot;</span></span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    volumes:</span><br><span class="line">      - ./node02/data:/usr/share/elasticsearch/data</span><br><span class="line">      - ./node02/logs:/usr/share/elasticsearch/logs</span><br><span class="line">      - ./node02/plugins:/usr/share/elasticsearch/plugins</span><br><span class="line">      - ./config:/usr/share/elasticsearch/config</span><br><span class="line">    ports:</span><br><span class="line">      - 9201:9200</span><br><span class="line">      - 9301:9300</span><br><span class="line">    networks:</span><br><span class="line">      - elastic</span><br><span class="line">  es03:</span><br><span class="line">    image: elasticsearch:7.12.0</span><br><span class="line">    container_name: es03</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es03</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es01,es02</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">true</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms768m -Xmx768m&quot;</span></span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    volumes:</span><br><span class="line">      - ./node03/data:/usr/share/elasticsearch/data</span><br><span class="line">      - ./node03/logs:/usr/share/elasticsearch/logs</span><br><span class="line">      - ./node03/plugins:/usr/share/elasticsearch/plugins</span><br><span class="line">      - ./config:/usr/share/elasticsearch/config</span><br><span class="line">    ports:</span><br><span class="line">      - 9202:9200</span><br><span class="line">      - 9302:9300</span><br><span class="line">    networks:</span><br><span class="line">      - elastic</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  elastic:</span><br><span class="line">    driver: bridge</span><br></pre></td></tr></table></figure>
<p>注：<br>(1) ES_JAVA_OPTS(es堆内存设置)<br>宿主机内存大小的一半和31GB，取最小值<br>(2) volumes(挂载卷)<br>对data、logs、plugins、config重新挂载，其中config目录里面的文件可从docker镜像里面copy出来</p>
<h2 id="log配置"><a href="#log配置" class="headerlink" title="log配置"></a>log配置</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/logging.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.12/logging.html</a></p>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h2 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose stop</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/docker.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.12/docker.html</a><br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/configuring-tls-docker.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.12/configuring-tls-docker.html</a></p>
]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>基于lima-docker安装elasticsearch集群</title>
    <url>/%E5%9F%BA%E4%BA%8Elima-docker%E5%AE%89%E8%A3%85elasticsearch%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<p>在macOS Apple Silicon(M1pro) 上，基于lima-docker采取 docker-compose 的方式来进行部署</p>
<h3 id="进入lima-docker"><a href="#进入lima-docker" class="headerlink" title="进入lima-docker"></a>进入lima-docker</h3><p>通过Mac terminal</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">limactl shell docker</span></span><br></pre></td></tr></table></figure>

<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>其他版本自己设定</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull arm64v8/elasticsearch:7.12.0</span><br></pre></td></tr></table></figure>

<h3 id="安装前配置"><a href="#安装前配置" class="headerlink" title="安装前配置"></a>安装前配置</h3><h4 id="文件描述符设置"><a href="#文件描述符设置" class="headerlink" title="文件描述符设置"></a>文件描述符设置</h4><p>设置目的：因为es会用到大量的文件描述符和文件句柄，Linux默认1024，如果文件描述符用完，会导致数据丢失</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看文件描述符限制，默认是1024</span></span><br><span class="line">$ <span class="built_in">ulimit</span> -n</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改文件描述符</span></span><br><span class="line"><span class="comment">#临时修改，仅在当前session生效</span></span><br><span class="line">$ sudo su  </span><br><span class="line">$ <span class="built_in">ulimit</span> -n 65535 </span><br><span class="line">$ su yanhangr</span><br><span class="line"></span><br><span class="line"><span class="comment">#永久生效</span></span><br><span class="line">$ vi /etc/security/limits.conf</span><br><span class="line"><span class="comment">#添加行,设置最大描述符65535，yanhangr表示用户名</span></span><br><span class="line">yanhangr  -  nofile  65535</span><br></pre></td></tr></table></figure>

<p>注意：Ubuntu 优先使用init.d而不是limits.conf。这里需要编辑&#x2F;etc&#x2F;pam.d&#x2F;su，确保下面这行“#”不存在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># session    required   pam_limits.so</span></span><br></pre></td></tr></table></figure>

<p>官方解释：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.5/file-descriptors.html">https://www.elastic.co/guide/en/elasticsearch/reference/8.5/file-descriptors.html</a></p>
<h4 id="vm-max-map-count设置"><a href="#vm-max-map-count设置" class="headerlink" title="vm_max_map_count设置"></a>vm_max_map_count设置</h4><p>设置目的：Elasticsearch 对各种文件混合使用了 NioFs（ 注：非阻塞文件系统）和 MMapFs （ 注：内存映射文件系统）。请确保你配置的最大映射数量，以便有足够的虚拟内存可用于 mmapped 文件。</p>
<p>官方解释：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.5/vm-max-map-count.html">https://www.elastic.co/guide/en/elasticsearch/reference/8.5/vm-max-map-count.html</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/sysctl.conf <span class="comment">#编辑sysctl.conf</span></span><br><span class="line">$ vm.max_map_count=262144 <span class="comment">#加入配置</span></span><br><span class="line">$ sysctl -p <span class="comment">#启用配置</span></span><br></pre></td></tr></table></figure>

<h4 id="disable-swapping"><a href="#disable-swapping" class="headerlink" title="disable swapping"></a>disable swapping</h4><p>设置目的：Linux设置swap的目的是当物理内存不够的时候，将内存不活跃数据转移到磁盘，即你的swap分区，避免oom</p>
<p>这里有个问题是导致大量的IO，使得性能变差，所以需要关闭swap。</p>
<p>官方解释：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.5/setup-configuration-memory.html">https://www.elastic.co/guide/en/elasticsearch/reference/8.5/setup-configuration-memory.html</a></p>
<p>关闭swap有3种方法</p>
<ol>
<li><p>禁用swap</p>
<p>临时禁用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo swapoff -a</span><br></pre></td></tr></table></figure>

<p>永久禁用</p>
<p>编辑&#x2F;etc&#x2F;fstab文件，在swap分区这行前加 # 禁用掉，保存退出</p>
</li>
<li><p>设置swapni</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/sysctl.conf <span class="comment">#编辑sysctl.conf</span></span><br><span class="line">$ vm.swappiness=1  <span class="comment">#加入配置</span></span><br><span class="line">$ sysctl -p <span class="comment">#启用配置</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>elasticsearch.yml 设置，如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bootstrap.memory_lock=<span class="literal">true</span></span><br><span class="line">ulimits:</span><br><span class="line">  memlock:</span><br><span class="line">    soft: -1</span><br><span class="line">    hard: -1</span><br></pre></td></tr></table></figure>

<p>此种方法会导致如下问题，因为无法正常使用ulimits命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error response from daemon: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error setting rlimits for ready process: error setting rlimit type 8: operation not permitted: unknown</span><br></pre></td></tr></table></figure>

<p>具体原因可能和<a href="https://github.com/nestybox">nestybox</a>&#x2F;**<a href="https://github.com/nestybox/sysbox">sysbox</a>**有关系，具体和lima的关系暂时还没有搞清楚</p>
<p><a href="https://github.com/nestybox/sysbox/issues/351">https://github.com/nestybox/sysbox/issues/351</a></p>
<p>Lima-vm默认已禁用swap，所以可以先不检查memory_lock，且不再设置ulimits</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yanhangr@lima-docker:/tmp/lima$ free -h</span><br><span class="line">               total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           3.8Gi       250Mi       3.1Gi       1.0Mi       510Mi       3.4Gi</span><br><span class="line">Swap:             0B          0B          0B</span><br></pre></td></tr></table></figure>

<p>lima-vm关于swap的文档  <a href="https://github.com/lima-vm/lima/discussions/941">Is swap space configurable? </a></p>
</li>
</ol>
<h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><h4 id="Es7-12版本"><a href="#Es7-12版本" class="headerlink" title="Es7.12版本"></a>Es7.12版本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;2.2&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  es01:</span><br><span class="line">    image: arm64v8/elasticsearch:7.12.0</span><br><span class="line">    container_name: es01</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es01</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es02,es03</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">false</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./node01/data:/usr/share/elasticsearch/data</span><br><span class="line">      - ./node01/logs:/usr/share/elasticsearch/logs</span><br><span class="line">      - ./node01/plugins:/usr/share/elasticsearch/plugins</span><br><span class="line">      - ./config:/usr/share/elasticsearch/config</span><br><span class="line">    ports:</span><br><span class="line">      - 9200:9200</span><br><span class="line">      - 9300:9300</span><br><span class="line">    networks:</span><br><span class="line">      - elastic</span><br><span class="line">  es02:</span><br><span class="line">    image: arm64v8/elasticsearch:7.12.0</span><br><span class="line">    container_name: es02</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es02</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es01,es03</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">false</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./node02/data:/usr/share/elasticsearch/data</span><br><span class="line">      - ./node02/logs:/usr/share/elasticsearch/logs</span><br><span class="line">      - ./node02/plugins:/usr/share/elasticsearch/plugins</span><br><span class="line">      - ./config:/usr/share/elasticsearch/config</span><br><span class="line">    ports:</span><br><span class="line">      - 9201:9200</span><br><span class="line">      - 9301:9300</span><br><span class="line">    networks:</span><br><span class="line">      - elastic</span><br><span class="line">  es03:</span><br><span class="line">    image: arm64v8/elasticsearch:7.12.0</span><br><span class="line">    container_name: es03</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es03</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es01,es02</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">false</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./node03/data:/usr/share/elasticsearch/data</span><br><span class="line">      - ./node03/logs:/usr/share/elasticsearch/logs</span><br><span class="line">      - ./node03/plugins:/usr/share/elasticsearch/plugins</span><br><span class="line">      - ./config:/usr/share/elasticsearch/config</span><br><span class="line">    ports:</span><br><span class="line">      - 9202:9200</span><br><span class="line">      - 9302:9300</span><br><span class="line">    networks:</span><br><span class="line">      - elastic      </span><br><span class="line">networks:</span><br><span class="line">  elastic:</span><br><span class="line">    driver: bridge</span><br></pre></td></tr></table></figure>

<p>备注：</p>
<p>（1）对data、logs、plugins、config重新挂载，其中config目录里面的文件可从docker镜像里面copy出来</p>
<p>（2）日志配置 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/logging.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.12/logging.html</a></p>
<h4 id="es-kibana-7-14版本"><a href="#es-kibana-7-14版本" class="headerlink" title="es+kibana 7.14版本"></a>es+kibana 7.14版本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;2.2&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  es01:</span><br><span class="line">    image: arm64v8/elasticsearch:7.14.0</span><br><span class="line">    container_name: es01</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es01</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es02,es03</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">false</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./node01/data:/usr/share/elasticsearch/data</span><br><span class="line">      - ./node01/logs:/usr/share/elasticsearch/logs</span><br><span class="line">      - ./node01/plugins:/usr/share/elasticsearch/plugins</span><br><span class="line">      - ./config:/usr/share/elasticsearch/config</span><br><span class="line">    ports:</span><br><span class="line">      - 9200:9200</span><br><span class="line">      - 9300:9300</span><br><span class="line">    networks:</span><br><span class="line">      - elastic</span><br><span class="line">  es02:</span><br><span class="line">    image: arm64v8/elasticsearch:7.14.0</span><br><span class="line">    container_name: es02</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es02</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es01,es03</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">false</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./node02/data:/usr/share/elasticsearch/data</span><br><span class="line">      - ./node02/logs:/usr/share/elasticsearch/logs</span><br><span class="line">      - ./node02/plugins:/usr/share/elasticsearch/plugins</span><br><span class="line">      - ./config:/usr/share/elasticsearch/config</span><br><span class="line">    ports:</span><br><span class="line">      - 9201:9200</span><br><span class="line">      - 9301:9300</span><br><span class="line">    networks:</span><br><span class="line">      - elastic</span><br><span class="line">  es03:</span><br><span class="line">    image: arm64v8/elasticsearch:7.14.0</span><br><span class="line">    container_name: es03</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es03</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es01,es02</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">false</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./node03/data:/usr/share/elasticsearch/data</span><br><span class="line">      - ./node03/logs:/usr/share/elasticsearch/logs</span><br><span class="line">      - ./node03/plugins:/usr/share/elasticsearch/plugins</span><br><span class="line">      - ./config:/usr/share/elasticsearch/config</span><br><span class="line">    ports:</span><br><span class="line">      - 9202:9200</span><br><span class="line">      - 9302:9300</span><br><span class="line">    networks:</span><br><span class="line">      - elastic    </span><br><span class="line">  kibana:</span><br><span class="line">		container_name: kibana</span><br><span class="line">    image: arm64v8/kibana:7.14.0</span><br><span class="line">    volumes:</span><br><span class="line">      - ./kibana/data:/usr/share/kibana/data</span><br><span class="line">      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml  </span><br><span class="line">    ports:</span><br><span class="line">      - 5601:5601</span><br><span class="line">    depends_on:</span><br><span class="line">      - es01</span><br><span class="line">      - es02</span><br><span class="line">      - es03</span><br><span class="line">    networks:</span><br><span class="line">      - elastic      </span><br><span class="line">networks:</span><br><span class="line">  elastic:</span><br><span class="line">    driver: bridge</span><br></pre></td></tr></table></figure>

<p>kibana.yml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ** THIS IS AN AUTO-GENERATED FILE **</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Default Kibana configuration for docker target</span></span><br><span class="line">server.host: <span class="string">&quot;0&quot;</span></span><br><span class="line">server.shutdownTimeout: <span class="string">&quot;5s&quot;</span></span><br><span class="line">elasticsearch.hosts: <span class="string">&#x27;[&quot;http://es01:9200&quot;,&quot;http://es02:9201&quot;,&quot;http://es03:9202&quot;]&#x27;</span></span><br><span class="line">monitoring.ui.container.elasticsearch.enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h4 id="es-kibana-8-5版本"><a href="#es-kibana-8-5版本" class="headerlink" title="es+kibana 8.5版本"></a>es+kibana 8.5版本</h4><p>.env</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Password for the &#x27;elastic&#x27; user (at least 6 characters)</span></span><br><span class="line">ELASTIC_PASSWORD=<span class="string">&#x27;changeme&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Password for the &#x27;kibana_system&#x27; user (at least 6 characters)</span></span><br><span class="line">KIBANA_PASSWORD=<span class="string">&#x27;changeme&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Version of Elastic products</span></span><br><span class="line">STACK_VERSION=8.5.0</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Set the cluster name</span></span><br><span class="line">CLUSTER_NAME=docker-es-cluster</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Set to &#x27;basic&#x27; or &#x27;trial&#x27; to automatically start the 30-day trial</span></span><br><span class="line">LICENSE=basic</span><br><span class="line"><span class="comment">#LICENSE=trial</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Port to expose Elasticsearch HTTP API to the host</span></span><br><span class="line">ES_PORT=9200</span><br><span class="line"><span class="comment">#ES_PORT=127.0.0.1:9200</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Port to expose Kibana to the host</span></span><br><span class="line">KIBANA_PORT=5601</span><br><span class="line"><span class="comment">#KIBANA_PORT=80</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Increase or decrease based on the available host memory (in bytes)</span></span><br><span class="line">MEM_LIMIT=21474836480</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Project namespace (defaults to the current folder name if not set)</span></span><br><span class="line">COMPOSE_PROJECT_NAME=docker-es-cluster</span><br></pre></td></tr></table></figure>

<p>docker-compose.yml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&quot;2.2&quot;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  setup:</span><br><span class="line">    image: arm64v8/elasticsearch:<span class="variable">$&#123;STACK_VERSION&#125;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./config/certs:/usr/share/elasticsearch/config/certs</span><br><span class="line">    user: <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="built_in">command</span>: &gt;</span><br><span class="line">      bash -c <span class="string">&#x27;</span></span><br><span class="line"><span class="string">        if [ x$&#123;ELASTIC_PASSWORD&#125; == x ]; then</span></span><br><span class="line"><span class="string">          echo &quot;Set the ELASTIC_PASSWORD environment variable in the .env file&quot;;</span></span><br><span class="line"><span class="string">          exit 1;</span></span><br><span class="line"><span class="string">        elif [ x$&#123;KIBANA_PASSWORD&#125; == x ]; then</span></span><br><span class="line"><span class="string">          echo &quot;Set the KIBANA_PASSWORD environment variable in the .env file&quot;;</span></span><br><span class="line"><span class="string">          exit 1;</span></span><br><span class="line"><span class="string">        fi;</span></span><br><span class="line"><span class="string">        if [ ! -f config/certs/ca.zip ]; then</span></span><br><span class="line"><span class="string">          echo &quot;Creating CA&quot;;</span></span><br><span class="line"><span class="string">          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;</span></span><br><span class="line"><span class="string">          unzip config/certs/ca.zip -d config/certs;</span></span><br><span class="line"><span class="string">        fi;</span></span><br><span class="line"><span class="string">        if [ ! -f config/certs/certs.zip ]; then</span></span><br><span class="line"><span class="string">          echo &quot;Creating certs&quot;;</span></span><br><span class="line"><span class="string">          echo -ne \</span></span><br><span class="line"><span class="string">          &quot;instances:\n&quot;\</span></span><br><span class="line"><span class="string">          &quot;  - name: es01\n&quot;\</span></span><br><span class="line"><span class="string">          &quot;    dns:\n&quot;\</span></span><br><span class="line"><span class="string">          &quot;      - es01\n&quot;\</span></span><br><span class="line"><span class="string">          &quot;      - localhost\n&quot;\</span></span><br><span class="line"><span class="string">          &quot;    ip:\n&quot;\</span></span><br><span class="line"><span class="string">          &quot;      - 127.0.0.1\n&quot;\</span></span><br><span class="line"><span class="string">          &quot;  - name: es02\n&quot;\</span></span><br><span class="line"><span class="string">          &quot;    dns:\n&quot;\</span></span><br><span class="line"><span class="string">          &quot;      - es02\n&quot;\</span></span><br><span class="line"><span class="string">          &quot;      - localhost\n&quot;\</span></span><br><span class="line"><span class="string">          &quot;    ip:\n&quot;\</span></span><br><span class="line"><span class="string">          &quot;      - 127.0.0.1\n&quot;\</span></span><br><span class="line"><span class="string">          &quot;  - name: es03\n&quot;\</span></span><br><span class="line"><span class="string">          &quot;    dns:\n&quot;\</span></span><br><span class="line"><span class="string">          &quot;      - es03\n&quot;\</span></span><br><span class="line"><span class="string">          &quot;      - localhost\n&quot;\</span></span><br><span class="line"><span class="string">          &quot;    ip:\n&quot;\</span></span><br><span class="line"><span class="string">          &quot;      - 127.0.0.1\n&quot;\</span></span><br><span class="line"><span class="string">          &gt; config/certs/instances.yml;</span></span><br><span class="line"><span class="string">          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;</span></span><br><span class="line"><span class="string">          unzip config/certs/certs.zip -d config/certs;</span></span><br><span class="line"><span class="string">        fi;</span></span><br><span class="line"><span class="string">        echo &quot;Setting file permissions&quot;</span></span><br><span class="line"><span class="string">        chown -R root:root config/certs;</span></span><br><span class="line"><span class="string">        find . -type d -exec chmod 750 \&#123;\&#125; \;;</span></span><br><span class="line"><span class="string">        find . -type f -exec chmod 640 \&#123;\&#125; \;;</span></span><br><span class="line"><span class="string">        echo &quot;Waiting for Elasticsearch availability&quot;;</span></span><br><span class="line"><span class="string">        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q &quot;missing authentication credentials&quot;; do sleep 30; done;</span></span><br><span class="line"><span class="string">        echo &quot;Setting kibana_system password&quot;;</span></span><br><span class="line"><span class="string">        until curl -s -X POST --cacert config/certs/ca/ca.crt -u &quot;elastic:$&#123;ELASTIC_PASSWORD&#125;&quot; -H &quot;Content-Type: application/json&quot; https://es01:9200/_security/user/kibana_system/_password -d &quot;&#123;\&quot;password\&quot;:\&quot;$&#123;KIBANA_PASSWORD&#125;\&quot;&#125;&quot; | grep -q &quot;^&#123;&#125;&quot;; do sleep 10; done;</span></span><br><span class="line"><span class="string">        echo &quot;All done!&quot;;</span></span><br><span class="line"><span class="string">      &#x27;</span></span><br><span class="line">    healthcheck:</span><br><span class="line">      <span class="built_in">test</span>: [<span class="string">&quot;CMD-SHELL&quot;</span>, <span class="string">&quot;[ -f config/certs/es01/es01.crt ]&quot;</span>]</span><br><span class="line">      interval: 1s</span><br><span class="line">      <span class="built_in">timeout</span>: 5s</span><br><span class="line">      retries: 120</span><br><span class="line"></span><br><span class="line">  es01:</span><br><span class="line">    depends_on:</span><br><span class="line">      setup:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">    image: arm64v8/elasticsearch:<span class="variable">$&#123;STACK_VERSION&#125;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./config/certs:/usr/share/elasticsearch/config/certs</span><br><span class="line">      - ./es01/data:/usr/share/elasticsearch/data</span><br><span class="line">      - ./es01/logs:/usr/share/elasticsearch/logs</span><br><span class="line">      - ./es01/plugins:/usr/share/elasticsearch/plugins</span><br><span class="line">    ports:</span><br><span class="line">      - 9200:9200</span><br><span class="line">      - 9300:9300</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es01</span><br><span class="line">      - cluster.name=<span class="variable">$&#123;CLUSTER_NAME&#125;</span></span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - discovery.seed_hosts=es02,es03</span><br><span class="line">      - ELASTIC_PASSWORD=<span class="variable">$&#123;ELASTIC_PASSWORD&#125;</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">false</span></span><br><span class="line">      - xpack.security.enabled=<span class="literal">true</span></span><br><span class="line">      - xpack.security.http.ssl.enabled=<span class="literal">true</span></span><br><span class="line">      - xpack.security.http.ssl.key=certs/es01/es01.key</span><br><span class="line">      - xpack.security.http.ssl.certificate=certs/es01/es01.crt</span><br><span class="line">      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt</span><br><span class="line">      - xpack.security.http.ssl.verification_mode=certificate</span><br><span class="line">      - xpack.security.transport.ssl.enabled=<span class="literal">true</span></span><br><span class="line">      - xpack.security.transport.ssl.key=certs/es01/es01.key</span><br><span class="line">      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt</span><br><span class="line">      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt</span><br><span class="line">      - xpack.security.transport.ssl.verification_mode=certificate</span><br><span class="line">      - xpack.license.self_generated.type=<span class="variable">$&#123;LICENSE&#125;</span></span><br><span class="line">    mem_limit: <span class="variable">$&#123;MEM_LIMIT&#125;</span></span><br><span class="line">    healthcheck:</span><br><span class="line">      <span class="built_in">test</span>:</span><br><span class="line">        [</span><br><span class="line">          <span class="string">&quot;CMD-SHELL&quot;</span>,</span><br><span class="line">          <span class="string">&quot;curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q &#x27;missing authentication credentials&#x27;&quot;</span>,</span><br><span class="line">        ]</span><br><span class="line">      interval: 10s</span><br><span class="line">      <span class="built_in">timeout</span>: 10s</span><br><span class="line">      retries: 120</span><br><span class="line"></span><br><span class="line">  es02:</span><br><span class="line">    depends_on:</span><br><span class="line">      - es01</span><br><span class="line">    image: arm64v8/elasticsearch:<span class="variable">$&#123;STACK_VERSION&#125;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./config/certs:/usr/share/elasticsearch/config/certs</span><br><span class="line">      - ./es02/data:/usr/share/elasticsearch/data</span><br><span class="line">      - ./es02/logs:/usr/share/elasticsearch/logs</span><br><span class="line">      - ./es02/plugins:/usr/share/elasticsearch/plugins      </span><br><span class="line">    ports:</span><br><span class="line">      - 9201:9200     </span><br><span class="line">      - 9301:9300</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es02</span><br><span class="line">      - cluster.name=<span class="variable">$&#123;CLUSTER_NAME&#125;</span></span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - discovery.seed_hosts=es01,es03</span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">false</span></span><br><span class="line">      - xpack.security.enabled=<span class="literal">true</span></span><br><span class="line">      - xpack.security.http.ssl.enabled=<span class="literal">true</span></span><br><span class="line">      - xpack.security.http.ssl.key=certs/es02/es02.key</span><br><span class="line">      - xpack.security.http.ssl.certificate=certs/es02/es02.crt</span><br><span class="line">      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt</span><br><span class="line">      - xpack.security.http.ssl.verification_mode=certificate</span><br><span class="line">      - xpack.security.transport.ssl.enabled=<span class="literal">true</span></span><br><span class="line">      - xpack.security.transport.ssl.key=certs/es02/es02.key</span><br><span class="line">      - xpack.security.transport.ssl.certificate=certs/es02/es02.crt</span><br><span class="line">      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt</span><br><span class="line">      - xpack.security.transport.ssl.verification_mode=certificate</span><br><span class="line">      - xpack.license.self_generated.type=<span class="variable">$&#123;LICENSE&#125;</span></span><br><span class="line">    mem_limit: <span class="variable">$&#123;MEM_LIMIT&#125;</span></span><br><span class="line">    healthcheck:</span><br><span class="line">      <span class="built_in">test</span>:</span><br><span class="line">        [</span><br><span class="line">          <span class="string">&quot;CMD-SHELL&quot;</span>,</span><br><span class="line">          <span class="string">&quot;curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q &#x27;missing authentication credentials&#x27;&quot;</span>,</span><br><span class="line">        ]</span><br><span class="line">      interval: 10s</span><br><span class="line">      <span class="built_in">timeout</span>: 10s</span><br><span class="line">      retries: 120</span><br><span class="line"></span><br><span class="line">  es03:</span><br><span class="line">    depends_on:</span><br><span class="line">      - es02</span><br><span class="line">    image: arm64v8/elasticsearch:<span class="variable">$&#123;STACK_VERSION&#125;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./config/certs:/usr/share/elasticsearch/config/certs</span><br><span class="line">      - ./es03/data:/usr/share/elasticsearch/data</span><br><span class="line">      - ./es03/logs:/usr/share/elasticsearch/logs</span><br><span class="line">      - ./es03/plugins:/usr/share/elasticsearch/plugins</span><br><span class="line">    ports:</span><br><span class="line">      - 9202:9200     </span><br><span class="line">      - 9302:9300</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es03</span><br><span class="line">      - cluster.name=<span class="variable">$&#123;CLUSTER_NAME&#125;</span></span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - discovery.seed_hosts=es01,es02</span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">false</span></span><br><span class="line">      - xpack.security.enabled=<span class="literal">true</span></span><br><span class="line">      - xpack.security.http.ssl.enabled=<span class="literal">true</span></span><br><span class="line">      - xpack.security.http.ssl.key=certs/es03/es03.key</span><br><span class="line">      - xpack.security.http.ssl.certificate=certs/es03/es03.crt</span><br><span class="line">      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt</span><br><span class="line">      - xpack.security.http.ssl.verification_mode=certificate</span><br><span class="line">      - xpack.security.transport.ssl.enabled=<span class="literal">true</span></span><br><span class="line">      - xpack.security.transport.ssl.key=certs/es03/es03.key</span><br><span class="line">      - xpack.security.transport.ssl.certificate=certs/es03/es03.crt</span><br><span class="line">      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt</span><br><span class="line">      - xpack.security.transport.ssl.verification_mode=certificate</span><br><span class="line">      - xpack.license.self_generated.type=<span class="variable">$&#123;LICENSE&#125;</span></span><br><span class="line">    mem_limit: <span class="variable">$&#123;MEM_LIMIT&#125;</span></span><br><span class="line">    healthcheck:</span><br><span class="line">      <span class="built_in">test</span>:</span><br><span class="line">        [</span><br><span class="line">          <span class="string">&quot;CMD-SHELL&quot;</span>,</span><br><span class="line">          <span class="string">&quot;curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q &#x27;missing authentication credentials&#x27;&quot;</span>,</span><br><span class="line">        ]</span><br><span class="line">      interval: 10s</span><br><span class="line">      <span class="built_in">timeout</span>: 10s</span><br><span class="line">      retries: 120</span><br><span class="line"></span><br><span class="line">  kibana:</span><br><span class="line">    depends_on:</span><br><span class="line">      es01:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">      es02:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">      es03:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">    image: arm64v8/kibana:<span class="variable">$&#123;STACK_VERSION&#125;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./config/certs:/usr/share/kibana/config/certs</span><br><span class="line">      - ./kibana/data:/usr/share/kibana/data</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="variable">$&#123;KIBANA_PORT&#125;</span>:5601</span><br><span class="line">    environment:</span><br><span class="line">      - SERVERNAME=kibana</span><br><span class="line">      - ELASTICSEARCH_HOSTS=https://es01:9200</span><br><span class="line">      - ELASTICSEARCH_USERNAME=kibana_system</span><br><span class="line">      - ELASTICSEARCH_PASSWORD=<span class="variable">$&#123;KIBANA_PASSWORD&#125;</span></span><br><span class="line">      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt</span><br><span class="line">    mem_limit: <span class="variable">$&#123;MEM_LIMIT&#125;</span></span><br><span class="line">    healthcheck:</span><br><span class="line">      <span class="built_in">test</span>:</span><br><span class="line">        [</span><br><span class="line">          <span class="string">&quot;CMD-SHELL&quot;</span>,</span><br><span class="line">          <span class="string">&quot;curl -s -I http://localhost:5601 | grep -q &#x27;HTTP/1.1 302 Found&#x27;&quot;</span>,</span><br><span class="line">        ]</span><br><span class="line">      interval: 10s</span><br><span class="line">      <span class="built_in">timeout</span>: 10s</span><br><span class="line">      retries: 120    </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>docker</tag>
        <tag>lima</tag>
      </tags>
  </entry>
  <entry>
    <title>ES写入和查询流程</title>
    <url>/ES%E5%86%99%E5%85%A5%E5%92%8C%E6%9F%A5%E8%AF%A2%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>ES涉及的算法</title>
    <url>/ES%E6%B6%89%E5%8F%8A%E7%9A%84%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="一、查询算法"><a href="#一、查询算法" class="headerlink" title="一、查询算法"></a>一、查询算法</h1><p>1、排序</p>
<p>2、模糊搜索</p>
<p>3、向量检索</p>
<h1 id="二、写入算法"><a href="#二、写入算法" class="headerlink" title="二、写入算法"></a>二、写入算法</h1><h1 id="三、存储算法"><a href="#三、存储算法" class="headerlink" title="三、存储算法"></a>三、存储算法</h1><h1 id="四、不同算法在其他场景的应用"><a href="#四、不同算法在其他场景的应用" class="headerlink" title="四、不同算法在其他场景的应用"></a>四、不同算法在其他场景的应用</h1>]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>elasticsearch</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch之配置参数</title>
    <url>/elasticsearch%E4%B9%8B%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<p>被移除的字段</p>
<p>_all 7.0 &#x3D;&#x3D;&gt;copy_to</p>
<p>Index(type)  6.0</p>
<h3 id="Dydamic-mapping"><a href="#Dydamic-mapping" class="headerlink" title="Dydamic mapping"></a>Dydamic mapping</h3><p>可以根据参数，是否对mapping新增字段自动映射数据类型</p>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>通过正排索引 id+字段，两种存储方法：</p>
<p>fielddata（内存）</p>
<p>doc_value（磁盘） 用于排序和聚合</p>
<h3 id="version-乐观锁并发控制"><a href="#version-乐观锁并发控制" class="headerlink" title="version 乐观锁并发控制"></a>version 乐观锁并发控制</h3><p>内部版本控制，字段_version被废除，采用 if_seq_no+if_primary_term</p>
<p>外部版本控制，字段_version</p>
<h3 id="索引生命周期管理（index-lifecyle-manage）"><a href="#索引生命周期管理（index-lifecyle-manage）" class="headerlink" title="索引生命周期管理（index lifecyle manage）"></a>索引生命周期管理（index lifecyle manage）</h3><p>关键api：</p>
<p>缩小分片：shrink（满足条件：索引只读、原索引分片在一个节点、缩小后到分片数可被原分片个数正整除）</p>
<p>扩大分片：split（满足条件：索引只读、扩大后到索引分片数是原分片数到倍数）</p>
<p>扩建索引：rollover（通过 alias设置条件：索引文档数量、索引文档大小、索引时间）</p>
<p>hot-&gt;warm-&gt;cold-&gt;delete</p>
<h3 id="集群架构"><a href="#集群架构" class="headerlink" title="集群架构"></a>集群架构</h3><p>master node;   data node; ingest node</p>
<p>curl -X PUT “localhost:9200&#x2F;nori_sample?pretty” -H ‘Content-Type: application&#x2F;json’ -d’<br>{<br>    “settings”: {<br>        “index”:{<br>            “analysis”:{<br>                “analyzer” : {<br>                    “my_analyzer” : {<br>                        “tokenizer” : “nori_tokenizer”,<br>                        “filter” : [“nori_readingform”]<br>                    }<br>                }<br>            }<br>        }<br>    }<br>}<br>‘<br>curl -X GET “localhost:9200&#x2F;nori_sample&#x2F;_analyze?pretty” -H ‘Content-Type: application&#x2F;json’ -d’<br>{<br>  “analyzer”: “my_analyzer”,<br>  “text”: “鄕歌”<br>}<br>‘</p>
]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch相关文档</title>
    <url>/elasticsearch%E7%9B%B8%E5%85%B3%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p>英文版</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.5/elasticsearch-intro.html">https://www.elastic.co/guide/en/elasticsearch/reference/8.5/elasticsearch-intro.html</a></p>
<p>中文版</p>
<p>基于2.x版本</p>
<p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/foreword_id.html">https://www.elastic.co/guide/cn/elasticsearch/guide/current/foreword_id.html</a></p>
<h3 id="java-api"><a href="#java-api" class="headerlink" title="java-api"></a>java-api</h3><p>8.5</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/current/index.html">https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/current/index.html</a></p>
<p>7.17</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/index.html">https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/index.html</a></p>
<h3 id="elastic社区"><a href="#elastic社区" class="headerlink" title="elastic社区"></a>elastic社区</h3><p><a href="https://discuss.elastic.co/">https://discuss.elastic.co</a></p>
<h3 id="Elastic-中国社区官方博客"><a href="#Elastic-中国社区官方博客" class="headerlink" title="Elastic 中国社区官方博客"></a>Elastic 中国社区官方博客</h3><p><a href="https://elasticstack.blog.csdn.net/?type=blog">https://elasticstack.blog.csdn.net/?type=blog</a></p>
]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo迁移</title>
    <url>/hexo%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<p>背景：之前hexo是在windows上编写，这里将hexo迁移到mac</p>
<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><p>前置安装homebrew，可以参考文章</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装nodejs</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew install node</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">新建目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> hexo</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> hexo</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">局部安装hexo，局部安装的好处是可以使得不同目录安装不同的版本</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">局部安装需要使用命令 npx hexo &lt;<span class="built_in">command</span>&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">初始化hexo</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo init yanhangr.github.io</span></span><br></pre></td></tr></table></figure>

<h2 id="迁移必要文件"><a href="#迁移必要文件" class="headerlink" title="迁移必要文件"></a>迁移必要文件</h2><p>复制win下的hexo部分文件到你Mac刚初始化的yanhangr.github.io下</p>
<p>必须复制文件夹：scaffolds，source</p>
<p>可选复制 _config.yml，themes</p>
<p>配置和主题这两个目录可能因为版本原因，不再支持你在mac新安装的hexo版本，可以不用复制，稍后再配置这两项即可</p>
<h2 id="github推送配置"><a href="#github推送配置" class="headerlink" title="github推送配置"></a>github推送配置</h2><p>修改yanhangr.github.io根目录下配置_config.yml</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/&lt;username&gt;/&lt;project&gt;</span><br><span class="line">  branch: master </span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ npx hexo d</span><br><span class="line"><span class="comment">#报错如下</span></span><br><span class="line">remote: Support <span class="keyword">for</span> password authentication was removed on August 13, 2021.</span><br><span class="line"></span><br><span class="line"><span class="comment">#解决途径，&lt;token&gt;使用github的personal access token替代，可以配置具体权限和期限</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://&lt;token&gt;@github.com/yanhangr/yanhangr.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>github配置personal access token路径，如下图</p>
<p><img src="/images/hexo/personal_access_token.png" alt="personal_access_token"></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo配置</title>
    <url>/hexo%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>本博客使用typora编写，采用Next主题，这里简单介绍一些hexo使用中的一些小技巧</p>
<h2 id="编辑功能"><a href="#编辑功能" class="headerlink" title="编辑功能"></a>编辑功能</h2><h3 id="设置标题、标签、分类"><a href="#设置标题、标签、分类" class="headerlink" title="设置标题、标签、分类"></a>设置标题、标签、分类</h3><p>typora上下各使用3个下划线“—”，把title、tags、categories包起来</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:titel</span><br><span class="line">tags:</span><br><span class="line">  - 标签1</span><br><span class="line">  - 标签2</span><br><span class="line">categories:</span><br><span class="line">  - 分类</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h3 id="阅读全文"><a href="#阅读全文" class="headerlink" title="阅读全文"></a>阅读全文</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">截断处加入如下：</span></span><br><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>

<h2 id="config-yml配置"><a href="#config-yml配置" class="headerlink" title="_config.yml配置"></a>_config.yml配置</h2><h3 id="url配置"><a href="#url配置" class="headerlink" title="url配置"></a>url配置</h3><p>在_post目录下创建文件夹管理文章，且不改变url，设置permalink即可，其中name表示文件名称，这个时候目录可以随意调整，title随意变更而不影响文章地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">URL</span></span><br><span class="line">url: http://example.com</span><br><span class="line">permalink: :name/</span><br></pre></td></tr></table></figure>





<h2 id="第三方插件"><a href="#第三方插件" class="headerlink" title="第三方插件"></a>第三方插件</h2><h3 id="留言插件-gitTalk"><a href="#留言插件-gitTalk" class="headerlink" title="留言插件 gitTalk"></a>留言插件 gitTalk</h3>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>基于scrapy的爬虫1--安装scrapy</title>
    <url>/%E5%9F%BA%E4%BA%8Escrapy%E7%9A%84%E7%88%AC%E8%99%AB-1/</url>
    <content><![CDATA[<p>之前写过简单爬虫，主要用了BeautifulSoup4、request等模块。现在开始学习爬虫框架scrapy，作为记录使用，有错误欢迎反馈。<br>(ps:没开始写之前，简单用了一下，真的很好用啊)</p>
<span id="more"></span>


<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="基于python3-7开发（目前最新版本）"><a href="#基于python3-7开发（目前最新版本）" class="headerlink" title="基于python3.7开发（目前最新版本）"></a>基于python3.7开发（目前最新版本）</h3><h3 id="编辑器：pycharm-（习惯使用IDEA）"><a href="#编辑器：pycharm-（习惯使用IDEA）" class="headerlink" title="编辑器：pycharm （习惯使用IDEA）"></a>编辑器：pycharm （习惯使用IDEA）</h3><h3 id="功能库：anaconda（解决各种包的依赖问题）"><a href="#功能库：anaconda（解决各种包的依赖问题）" class="headerlink" title="功能库：anaconda（解决各种包的依赖问题）"></a>功能库：anaconda（解决各种包的依赖问题）</h3><h3 id="官方社区、文档-重要啊！！！-："><a href="#官方社区、文档-重要啊！！！-：" class="headerlink" title="官方社区、文档(重要啊！！！)："></a>官方社区、文档(重要啊！！！)：</h3><p><a href="https://github.com/search?q=scrapy">scrapy on GitHub</a><br><a href="https://docs.scrapy.org/en/1.6/">英文文档</a><br><a href="https://scrapy-chs.readthedocs.io/zh_CN/1.0/">中文文档</a></p>
<p>关于pycharm、anaconda的安装配置，网上教程比较多，这里不说了。所以这里从安装scrapy开始</p>
<h2 id="安装scrapy"><a href="#安装scrapy" class="headerlink" title="安装scrapy"></a>安装scrapy</h2><p>因为有anaconda，我们依赖各种包现在都很方便，接下来我们便使用它来安装</p>
<h3 id="查看是否已经安装scrapy"><a href="#查看是否已经安装scrapy" class="headerlink" title="查看是否已经安装scrapy"></a>查看是否已经安装scrapy</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda list scrapy</span><br></pre></td></tr></table></figure>

<h3 id="查询conda支持的scrapy版本"><a href="#查询conda支持的scrapy版本" class="headerlink" title="查询conda支持的scrapy版本"></a>查询conda支持的scrapy版本</h3><p>我的python3.7显示匹配的Scrapy v1.6版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda search scrapy</span><br></pre></td></tr></table></figure>

<h3 id="执行安装"><a href="#执行安装" class="headerlink" title="执行安装"></a>执行安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install scrapy </span><br></pre></td></tr></table></figure>
<p>选择“yes”，静待它安装完成，如果中途遇到网络不好，则继续执行这一步，conda会继续下载上次没有下载的包。</p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>scrapy</tag>
        <tag>python3</tag>
      </tags>
  </entry>
  <entry>
    <title>基于scrapy的爬虫2--第一个小爬虫</title>
    <url>/%E5%9F%BA%E4%BA%8Escrapy%E7%9A%84%E7%88%AC%E8%99%AB2-%E5%9F%BA%E4%BA%8Escrapy%E7%9A%84%E5%B0%8F%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>先放这里，明天继续写！</p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>scrapy</tag>
        <tag>python3</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot--log4j2配置学习</title>
    <url>/springboot%E6%95%B4%E5%90%88log4j2/</url>
    <content><![CDATA[<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://michael728.github.io/2019/08/10/java-spring-boot-log4j2/">https://michael728.github.io/2019/08/10/java-spring-boot-log4j2/</a></p>
<p><a href="https://github.com/alibaba/druid/wiki/Druid%E4%B8%AD%E4%BD%BF%E7%94%A8log4j2%E8%BF%9B%E8%A1%8C%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA">https://github.com/alibaba/druid/wiki/Druid%E4%B8%AD%E4%BD%BF%E7%94%A8log4j2%E8%BF%9B%E8%A1%8C%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA</a></p>
<p><a href="https://www.cnblogs.com/xishuai/p/spring-boot-log4j2.html">https://www.cnblogs.com/xishuai/p/spring-boot-log4j2.html</a></p>
<p><a href="https://www.cnblogs.com/keeya/p/10101547.html">https://www.cnblogs.com/keeya/p/10101547.html</a></p>
<p><a href="http://dkylin.com/archives/2017/spring-boot-log4j2-config.html">http://dkylin.com/archives/2017/spring-boot-log4j2-config.html</a></p>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>log4j2</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot--整合spring-security</title>
    <url>/springboot%E6%95%B4%E5%90%88spring-security/</url>
    <content><![CDATA[<p>spring security和shiro是两个专注于认证和授权的安全框架，因为在做的文库系统是基于springboot的，所以这里学习一下如何整合spring security</p>
<h2 id="基于角色的访问控制（RBAC-role-based-acess-control）"><a href="#基于角色的访问控制（RBAC-role-based-acess-control）" class="headerlink" title="基于角色的访问控制（RBAC role-based acess control）"></a>基于角色的访问控制（RBAC role-based acess control）</h2><p><a href="https://www.cnblogs.com/berandwaddle/p/11343824.html">https://www.cnblogs.com/berandwaddle/p/11343824.html</a></p>
<h3 id="账户锁定"><a href="#账户锁定" class="headerlink" title="账户锁定"></a>账户锁定</h3><p><a href="https://segmentfault.com/a/1190000012518537">https://segmentfault.com/a/1190000012518537</a></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.jianshu.com/p/5b9f1f4de88d">https://www.jianshu.com/p/5b9f1f4de88d</a>   </p>
<p><a href="https://www.cnblogs.com/xifengxiaoma/p/11106220.html">https://www.cnblogs.com/xifengxiaoma/p/11106220.html</a></p>
<p><a href="https://www.jianshu.com/p/d5ce890c67f7">https://www.jianshu.com/p/d5ce890c67f7</a></p>
<p><a href="https://www.cnblogs.com/felordcn/p/12142505.html">https://www.cnblogs.com/felordcn/p/12142505.html</a></p>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>spring security</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE学习</title>
    <url>/VUE%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="vue模板"><a href="#vue模板" class="headerlink" title="vue模板"></a>vue模板</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;&lt;/template&gt;</span><br><span class="line">&lt;script&gt;&lt;/script&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h3 id="script部分"><a href="#script部分" class="headerlink" title="script部分"></a>script部分</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  name: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 组件的方法</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    // watch擅长处理的场景：一个数据影响多个数据</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    // computed擅长处理的场景：一个数据受多个数据影响</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeCreate: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    // 在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。</span><br><span class="line">  &#125;,</span><br><span class="line">  created: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    // 实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，<span class="variable">$el</span> 属性目前不可见。</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeMount: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    // 在挂载开始之前被调用：相关的 render 函数首次被调用。</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    // 编译好的HTML挂载到页面完成后执行的事件钩子</span><br><span class="line">    // el 被新创建的 vm.<span class="variable">$el</span> 替换，并挂载到实例上去之后调用该钩子。</span><br><span class="line">    // 此钩子函数中一般会做一些ajax请求获取数据进行数据初始化</span><br><span class="line">    console.log(<span class="string">&quot;Home done&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeUpdate: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    // 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</span><br><span class="line">  &#125;,</span><br><span class="line">  updated: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    // 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</span><br><span class="line">    // 当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。</span><br><span class="line">    // 该钩子在服务器端渲染期间不被调用。</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    // 实例销毁之前调用。在这一步，实例仍然完全可用。</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    // Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>转载地址：<a href="https://www.cnblogs.com/chenzeyongjsj/p/8093789.html">https://www.cnblogs.com/chenzeyongjsj/p/8093789.html</a></p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>前端项目快速上手</title>
    <url>/%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
    <content><![CDATA[<p>最近在做类百度文库系统，这次需要自己写前端….; 作为一枚后端开发工程师，为了搭建前端系统，这里快速学习一下可能会涉及到的前端技术。</p>
<h2 id="前端术语"><a href="#前端术语" class="headerlink" title="前端术语"></a>前端术语</h2><h4 id="前端三驾马车"><a href="#前端三驾马车" class="headerlink" title="前端三驾马车"></a>前端三驾马车</h4><p>html、css、js</p>
<p>html负责前端结构；css负责前端展现样式；js负责前端动态功能；<br>html是主体，装载各种dom元素；css用来装饰dom元素；javascript控制dom元素。<br>ES5&#x2F;ES6是指JS的ECMAScript，规定其语法的东西</p>
<p>参考文档<br>【讲html&#x2F;css、js】<a href="https://www.w3school.com.cn/h.asp">https://www.w3school.com.cn/h.asp</a><br>【讲js如何操作DOM】<a href="https://www.cnblogs.com/zxt-17862802783/p/7498790.html">https://www.cnblogs.com/zxt-17862802783/p/7498790.html</a><br>【js的两样东西ES和DOM】<a href="https://www.cnblogs.com/sunshinezjb/p/9248533.html">https://www.cnblogs.com/sunshinezjb/p/9248533.html</a></p>
<h4 id="node-js、npm、webpack"><a href="#node-js、npm、webpack" class="headerlink" title="node.js、npm、webpack"></a>node.js、npm、webpack</h4><p>node.js是js的运行环境；类比到jvm是Java的运行环境</p>
<p>npm是Node.js的包管理工具（package manager）</p>
<p>webpack是前端打包工具</p>
<h4 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h4><p>也即vue.js，前端开源框架，相同开源框架还有Angular、React。</p>
<p>因为国内对vue使用率较高，所以接下来以vue.js设计的技术来展开。</p>
<h2 id="vue涉及技术"><a href="#vue涉及技术" class="headerlink" title="vue涉及技术"></a>vue涉及技术</h2><p>vue-cli：vue脚手架，基于此可以快速搭建vue项目</p>
<p>vuex：全局状态管理框架</p>
<p>vue-router：路由</p>
<p>axios：http框架，和后端接口交互</p>
<p>element-ui ：基于vue的UI组件库，由饿了么开发；另外还有阿里的 ant-design-vue等组件库</p>
<h2 id="参考项目"><a href="#参考项目" class="headerlink" title="参考项目"></a>参考项目</h2><p>在GitHub&#x2F;Gitee 找到了两个开源项目，以此作为参考足以继续下面的文库前端开发</p>
<h3 id="vue-element-ui"><a href="#vue-element-ui" class="headerlink" title="vue-element-ui"></a>vue-element-ui</h3><p>源码地址：<br>GitHub：<a href="https://github.com/PanJiaChen/vue-element-admin">https://github.com/PanJiaChen/vue-element-admin</a><br>Gitee：<a href="https://gitee.com/panjiachen/vue-element-admin">https://gitee.com/panjiachen/vue-element-admin</a></p>
<p>参考文档：<br><a href="https://panjiachen.github.io/vue-element-admin-site/zh/guide/">https://panjiachen.github.io/vue-element-admin-site/zh/guide/</a></p>
<h3 id="mall-admin-web"><a href="#mall-admin-web" class="headerlink" title="mall-admin-web"></a>mall-admin-web</h3><p>源码地址：<br>GitHub：<a href="https://github.com/macrozheng/mall-admin-web">https://github.com/macrozheng/mall-admin-web</a><br>Gitee: <a href="https://gitee.com/macrozheng/mall-admin-web">https://gitee.com/macrozheng/mall-admin-web</a></p>
<p>参考文档：<br><a href="http://www.macrozheng.com/#/foreword/mall_foreword_01">http://www.macrozheng.com/#/foreword/mall_foreword_01</a></p>
<h2 id="基于vue-cli脚手架创建项目"><a href="#基于vue-cli脚手架创建项目" class="headerlink" title="基于vue-cli脚手架创建项目"></a>基于vue-cli脚手架创建项目</h2><h3 id="安裝vue-cli"><a href="#安裝vue-cli" class="headerlink" title="安裝vue-cli"></a>安裝vue-cli</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g @vue/cli</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure>

<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>我用的是 vue ui</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vue create my-project</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">vue ui</span><br></pre></td></tr></table></figure>

<p>插件安装选择</p>
<p><img src="/images/vue-cli.png"></p>
<p>1、router history or hash模式选择，这里我们选择history模式<br>参考文档<br><a href="https://www.cnblogs.com/youngly/p/9324608.html">https://www.cnblogs.com/youngly/p/9324608.html</a><br><a href="https://blog.csdn.net/Gabriel_wei/article/details/89631787">https://blog.csdn.net/Gabriel_wei/article/details/89631787</a></p>
<p>2、css预处理器选择<br>dart-sass和node-sass选择，这里我们选择的是node-sass，但好像dart-sass更好一点</p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>element-ui</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>我的文库系统-0</title>
    <url>/%E6%88%91%E7%9A%84%E6%96%87%E5%BA%93%E7%B3%BB%E7%BB%9F-0/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>写这此之前，已经购买服务器、他人源代码搭建了一个文库系统，并已经上线（具体名字就不透漏了）。</p>
<p>文库主要是在做一个高等教育文库，面向大学生群体，特别是考研的学生，提供考研教育服务。</p>
<p>之前为了项目快速上线，直接买了一个文库系统，希望把有限的经历专注于内容和运营。</p>
<p>因为文库代码是编译版的，无法修改源码实现自己的功能，比较受限。所以，打算自己开发一个文库系统。</p>
<h2 id="文库功能"><a href="#文库功能" class="headerlink" title="文库功能"></a>文库功能</h2><p>文库功能嘛，对标百度文库。</p>
<p>自己写代码嘛，无法做到一蹴而就。从前端到后端，由0到1是个痛苦的过程，但是之后会慢慢好起来。</p>
<p>这里，我们把文库主要功能分为3期来完成。</p>
<p>先设定一定的开发期限，由于是只能在周末开发，当然周末也不一定完全专注于开发，先给自己设定一个目标。</p>
<p>“小步快跑，快速迭代，从不完美开始”</p>
<span id="more"></span>

<h3 id="一期功能"><a href="#一期功能" class="headerlink" title="一期功能"></a>一期功能</h3><p>文档的上传，转换，浏览，下载，也是核心功能。</p>
<p>deadline：2019-08-25 </p>
<h3 id="二期功能"><a href="#二期功能" class="headerlink" title="二期功能"></a>二期功能</h3><p>主要包括用户模块（注册、登录），简单后台管理模块，以及对应的前端开发。</p>
<p>deadline：2019-09-01</p>
<p>时间线：</p>
<h3 id="三期功能"><a href="#三期功能" class="headerlink" title="三期功能"></a>三期功能</h3><p>三期主要对文库功能的一个补充。比如第三方注册，用户组阅读、下载权限控制，水印，支付功能，搜索功能，文库的oss存储功能等等。</p>
<p>三期完成之后，接下来是一个不断完善的过程，这个时候基本上可以上线运营了。</p>
<p>deadline：2019-09-15</p>
<h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><p>操作系统：Windows 10</p>
<p>开发工具：Intellij IDEA</p>
<p>数据库：MySQL 8.0.13</p>
<p>Java SDK：Oracle JDK 1.8.191</p>
<h3 id="项目部署环境"><a href="#项目部署环境" class="headerlink" title="项目部署环境"></a>项目部署环境</h3><p>操作系统：Linux centos7</p>
<p>虚拟化技术：VMware + Docker</p>
<h3 id="项目管理工具"><a href="#项目管理工具" class="headerlink" title="项目管理工具"></a>项目管理工具</h3><p>项目构建：Maven</p>
<p>代码管理：GitHub</p>
<p>镜像管理：Docker Registry</p>
<h3 id="后台技术栈"><a href="#后台技术栈" class="headerlink" title="后台技术栈"></a>后台技术栈</h3><p>前期这里我只写能用到的技术，至于后面功能增强，分布式开发这些后面我们再补充。</p>
<p>核心框架：Spring Boot</p>
<p>文档转换队列：disruptor</p>
<p>ORM 框架：MyBatis</p>
<p>数据库连接池：Alibaba Druid</p>
<p>数据库缓存：Redis 和 RocksDB（方便单机环境）</p>
<p>分布式文件系统：Alibaba OSS</p>
<p>权限管理框架 spring security + jwt</p>
<h3 id="前端技术栈"><a href="#前端技术栈" class="headerlink" title="前端技术栈"></a>前端技术栈</h3><p>前端框架：NodeJS + Vue + Axios</p>
<p>前端模板：ElementUI</p>
<h3 id="文档转换"><a href="#文档转换" class="headerlink" title="文档转换"></a>文档转换</h3><pre><code>office --&gt; pdf --&gt; svg
</code></pre>
<p>Libreoffice(或Openoffice)用于将.doc、.ppt等office文档转PDF	</p>
<p>pdf2svg，用于将PDF转成svg矢量图片</p>
]]></content>
      <categories>
        <category>文库</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch之java api client</title>
    <url>/elasticsearch%E4%B9%8Bjava%20api%20client/</url>
    <content><![CDATA[<p>Elasticsearch client有3种客户端，分别为TransportClient、HighLevelRestClient、javaApiClient。</p>
<p>TransportClient自elasticsearch第一次提交一来就存在。TransportClient是一个特殊的客户端，采用传输层协议TCP进行通信，如果客户端版本与elasticsearch版本一致，就会出现兼容性问题。TransportClient在elasticsearch8.x版本中被移除。</p>
<p>HighLevelRestClient基于LowLevelRestClient，在2016年发布。LowLevelRestClient与所有版本的ES兼容，通过http与ES集群进行通信。restClient始于5.6版本，在7.15版本之后被弃用，转而替代的是java api client。</p>
<h3 id="JavaApiClient"><a href="#JavaApiClient" class="headerlink" title="JavaApiClient"></a>JavaApiClient</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><h4 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create the low-level client</span></span><br><span class="line"><span class="type">RestClient</span> <span class="variable">restClient</span> <span class="operator">=</span> RestClient.builder(</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>)).build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the transport with a Jackson mapper</span></span><br><span class="line"><span class="type">ElasticsearchTransport</span> <span class="variable">transport</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestClientTransport</span>(</span><br><span class="line">  restClient, <span class="keyword">new</span> <span class="title class_">JacksonJsonpMapper</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// And create the API client</span></span><br><span class="line">client = <span class="keyword">new</span> <span class="title class_">ElasticsearchClient</span>(transport);</span><br></pre></td></tr></table></figure>

<h4 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h4><p>http协议和传输层协议相比性能如何，<a href="https://www.elastic.co/cn/blog/state-of-the-official-elasticsearch-java-clients">官方博文解释</a> 性能相近。</p>
<h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><h3 id="HighLevelRestClient迁移到JavaApiClient"><a href="#HighLevelRestClient迁移到JavaApiClient" class="headerlink" title="HighLevelRestClient迁移到JavaApiClient"></a>HighLevelRestClient迁移到JavaApiClient</h3><p>参考文档：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/7.16/migrate-hlrc.html">https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/7.16/migrate-hlrc.html</a></p>
<h3 id="TransportClient迁移到HighLevelRestClient"><a href="#TransportClient迁移到HighLevelRestClient" class="headerlink" title="TransportClient迁移到HighLevelRestClient"></a>TransportClient迁移到HighLevelRestClient</h3><p>参考文档：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.15/java-rest-high-level-migration.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.15/java-rest-high-level-migration.html</a></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>TransportClient跟随elasticsearch版本</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api/index.html">https://www.elastic.co/guide/en/elasticsearch/client/java-api/index.html</a></p>
<p>TransportClient迁移到HighLevelRestClient原因博文</p>
<p><a href="https://www.elastic.co/cn/blog/state-of-the-official-elasticsearch-java-clients">https://www.elastic.co/cn/blog/state-of-the-official-elasticsearch-java-clients</a></p>
]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>我的文库系统（1）-- 文档在线预览调研</title>
    <url>/%E6%88%91%E7%9A%84%E6%96%87%E5%BA%93%E7%B3%BB%E7%BB%9F%EF%BC%881%EF%BC%89--%20%E6%96%87%E6%A1%A3%E5%9C%A8%E7%BA%BF%E9%A2%84%E8%A7%88%E8%B0%83%E7%A0%94/</url>
    <content><![CDATA[<h2 id="商业解决方案"><a href="#商业解决方案" class="headerlink" title="商业解决方案"></a>商业解决方案</h2><p>永中文档  <a href="http://www.yozodcs.com/">http://www.yozodcs.com/</a><br>office365 <a href="https://officeweb365.com/Default/Viewview">https://officeweb365.com/Default/Viewview</a><br>IDOCV     <a href="https://www.idocv.com/examples.html">https://www.idocv.com/examples.html</a><br>一般都是参与文档底层解析，然后再去展示</p>
<h2 id="开源解决方案"><a href="#开源解决方案" class="headerlink" title="开源解决方案"></a>开源解决方案</h2><p>kkFileView <a href="https://gitee.com/kekingcn/file-online-preview/wikis/pages">https://gitee.com/kekingcn/file-online-preview/wikis/pages</a></p>
]]></content>
      <categories>
        <category>文库</category>
      </categories>
  </entry>
  <entry>
    <title>我的文库系统--用户角色设计</title>
    <url>/%E6%88%91%E7%9A%84%E6%96%87%E5%BA%93%E7%B3%BB%E7%BB%9F-%E7%94%A8%E6%88%B7%E8%A7%92%E8%89%B2%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>网站用户角色，应该分为前台用户角色和后台用户角色，所以设计数据库表和代码之前，先把业务背景思考清楚。</p>
<h2 id="前台角色"><a href="#前台角色" class="headerlink" title="前台角色"></a>前台角色</h2><p>现在参考discuz的设计和百度文库的业务场景，考拉文库前台用户可能涉及的角色。</p>
<p>在考虑角色之前，我们先把角色权限弄清楚，管理通过自定义角色，然后再对该角色赋予不同权限即可。</p>
<p>如下权限包括但不限于，之后想到再来补充：</p>
<p>浏览篇：<br>是否可以浏览文档（对应文档等级）、是否限制浏览文档页数</p>
<p>下载篇<br>是否可以下载文档、是否可以免积分下载文档</p>
<h2 id="后台管理员角色"><a href="#后台管理员角色" class="headerlink" title="后台管理员角色"></a>后台管理员角色</h2><p>网站管理需要多个角色，比如运营管理员，用户管理员，交易管理员等等</p>
]]></content>
      <categories>
        <category>文库</category>
      </categories>
  </entry>
  <entry>
    <title>文库上传转换功能实现</title>
    <url>/%E6%96%87%E5%BA%93%E4%B8%8A%E4%BC%A0%E8%BD%AC%E6%8D%A2%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="文档实现预览功能的步骤"><a href="#文档实现预览功能的步骤" class="headerlink" title="文档实现预览功能的步骤"></a>文档实现预览功能的步骤</h2><p>1、前端用户上传文库，作MD5校验，去数据库判断是否存在相同文档；若没有，进入步骤2。</p>
<p>2、如若不存在相同文档，则把文档上传到临时目录，且数据库插入一条原始文档数据<br>  （插入数据包含，文件名称，文件大小，文件类型、原文件临时目录的路径，唯一ID–》UUID和文件的MD5)</p>
<p>  并向前端返回唯一ID，以便绑定“售价、转换页数、关键词”这些信息，唯一ID也可以由前端生成传给后端。唯一ID可以是数据库主键，可以是UUID，也可以是MD5，这两者基本上都可以保持唯一性。</p>
<p>3、生产者：数据（包含“售价、转换页数、关键词”人为定义的字段）再次插入，通过监听数据库的插入方法，把该条数据加入文档转换队列（队列使用disruptor）</p>
<p>数据库文档状态为&#x3D;&#x3D;》转换中</p>
<p>4、消费者一：对文档进行处理（调用libreoffice,先转转换为PDF,然后再转成PNG或者SVG，其他功能还有加水印等)<br>4.1 如果为PDF，则进行下一步；不是PDF则转为PDF<br>4.2 PDF根据转换要求转成svg，比如多少页<br>4.3 删除中间态文档</p>
<p>5、消费者二：消费者一完成，无论结果如何，更新原来已经插入数据库的那条数据。<br>数据库文档状态&#x3D;&#x3D;》装换失败或者为转换成功</p>
<p>6、最终根据数据库里面的数据，状态、规则限定来决定是否对用户展示此文档。这里是文档的展示状态：1：审核中，2：自动审核成功，3：人工审核成功，4：特权，无需审核</p>
<h2 id="转换核心步骤"><a href="#转换核心步骤" class="headerlink" title="转换核心步骤"></a>转换核心步骤</h2><h3 id="OFFICE转PDF"><a href="#OFFICE转PDF" class="headerlink" title="OFFICE转PDF"></a>OFFICE转PDF</h3><h3 id="PDF转图片"><a href="#PDF转图片" class="headerlink" title="PDF转图片"></a>PDF转图片</h3><p>PDFBOX(<a href="https://pdfbox.apache.org/">https://pdfbox.apache.org/</a>)<br>&#x3D;&#x3D;》提取页码总数、提取文本、转成png或jpg</p>
<p>问题：<br>1、若某个文本过大，会撑爆内存？需要设置合适范围，不然mysql也写不进去<br>mysql中text 最大长度为65,535(2的16次方–1)字符的TEXT列<br>MEDIUMTEXT 最大长度为16,777,215<br>LONGTEXT 最大长度为4,294,967,295</p>
<p>解决方案：<br>PDFTextStripper 可以限定提取页码范围、数量</p>
<p>提取的文本分表处理，尽量少字段，可以冗余字段，主要在列表页展示<br>涉及字段：文档ID、名称、描述、关键词</p>
<h3 id="PDF转SVG"><a href="#PDF转SVG" class="headerlink" title="PDF转SVG"></a>PDF转SVG</h3><p>1、pdf转图片</p>
<p>(1)PDFBOX<br><a href="https://pdfbox.apache.org/">https://pdfbox.apache.org/</a><br>提取页码、提取文本、转成png或jpg</p>
<p>提取文本时的问题<br>1、若某个文本过大，会不会撑爆内存？建议设置合适范围，不然mysql也写不进去<br>mysql中text 最大长度为65,535(2的16次方–1)字符的TEXT列。<br>MEDIUMTEXT最大长度为16,777,215。<br>LONGTEXT最大长度为4,294,967,295<br>PDFTextStripper 可以限定</p>
<p>2、若第一页为图片，即使接下来都是文字，也可以提取文字，但是图片包含的东西是未知的。</p>
<p>数据库字段<br>1、增加 文件夹前缀，文件夹相对路径，转换完成时间，转换所处状态，转换失败原因</p>
<p>测试case<br>1、上传“文件x”，不存在相同文档，然后进入审核阶段；此时再有人上传”文件X”,也应该提醒已经存在相同文档！<br>看我的文库如何解决</p>
<p>后续优化问题<br>1、优化disruptor 队列处理</p>
]]></content>
      <categories>
        <category>文库</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>disruptor</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>mac搭建python环境</title>
    <url>/mac%E6%90%AD%E5%BB%BApython%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>本文安装采用homebrew来管理mac软件，homebrew的安装请参考mac软件安装篇</p>
<h2 id="安装anaconda"><a href="#安装anaconda" class="headerlink" title="安装anaconda"></a>安装anaconda</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install anaconda</span><br><span class="line"><span class="comment">#安装完成后，设置环境变量</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;/opt/homebrew/anaconda3/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line">$ <span class="built_in">source</span> ~/.zshrc</span><br><span class="line"><span class="comment">#启动jupyter-notebook</span></span><br><span class="line">$ <span class="built_in">cd</span> /opt/homebrew/anaconda3/bin</span><br><span class="line">$ ./jupyter-notebook</span><br></pre></td></tr></table></figure>

<h2 id="安装pycharm"><a href="#安装pycharm" class="headerlink" title="安装pycharm"></a>安装pycharm</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install pycharm</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用命令</title>
    <url>/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>linux常用命令介绍：<a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/base/index.html">https://linuxtools-rst.readthedocs.io/zh_CN/latest/base/index.html</a></p>
<h3 id="查看文件夹或者文件大小"><a href="#查看文件夹或者文件大小" class="headerlink" title="查看文件夹或者文件大小"></a>查看文件夹或者文件大小</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看当前目录文件夹大小</span></span><br><span class="line">$ <span class="built_in">du</span> -h --max-depth=1</span><br></pre></td></tr></table></figure>



<h3 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h3><h4 id="本地拷贝"><a href="#本地拷贝" class="headerlink" title="本地拷贝"></a>本地拷贝</h4><h4 id="远程拷贝"><a href="#远程拷贝" class="headerlink" title="远程拷贝"></a>远程拷贝</h4><p>Linux scp命令用于Linux之间复制文件和目录。scp是secure copy 的缩写, scp是 linux 系统下基于ssh登陆进行安全的远程文件拷贝命令。</p>
<p><strong>linux scp命令的用法案例</strong></p>
<p>(1)从本地拷贝文件到远程服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ scp /usr/share/docker/es7.12/docker-compose.yml  koaladoc@192.168.50.32:/usr/share/docker</span><br></pre></td></tr></table></figure>

<p>(2)从远程服务器拷贝文件到本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#复制远程文件到本地</span></span><br><span class="line">$ scp koaladoc@192.168.50.32:/usr/share/docker/docker-compose.yml  /usr/share/docker/es7.12</span><br><span class="line"></span><br><span class="line"><span class="comment">#复制远程目录到本地文件夹/usr/share/docker  -r 表示递归复制整个目录</span></span><br><span class="line">$ scp -r koaladoc@192.168.50.32:/usr/share/docker/es7.12/  /usr/share/docker</span><br></pre></td></tr></table></figure>

<p>常用命令参数：</p>
<ul>
<li>-r 递归复制整个目录</li>
<li>-P port 注意是大写的P, port是指定数据传输用到的端口号</li>
</ul>
<h3 id="ssh远程登录"><a href="#ssh远程登录" class="headerlink" title="ssh远程登录"></a>ssh远程登录</h3><p>ssh <a href="mailto:&#x6b;&#111;&#97;&#108;&#x61;&#x64;&#111;&#99;&#x40;&#49;&#x39;&#x32;&#x2e;&#49;&#54;&#56;&#x2e;&#x35;&#x30;&#x2e;&#56;&#57;">&#x6b;&#111;&#97;&#108;&#x61;&#x64;&#111;&#99;&#x40;&#49;&#x39;&#x32;&#x2e;&#49;&#54;&#56;&#x2e;&#x35;&#x30;&#x2e;&#56;&#57;</a> -p 22</p>
<p>koaladoc是用户名，回车之后输入密码登录访问</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>wechat和chatgpt打造chatRobot</title>
    <url>/wechat%E5%92%8Cchatgpt%E6%89%93%E9%80%A0chatRobot/</url>
    <content><![CDATA[<h2 id="三个工具"><a href="#三个工具" class="headerlink" title="三个工具"></a>三个工具</h2><h3 id="wechaty-rpa-chatbot"><a href="#wechaty-rpa-chatbot" class="headerlink" title="wechaty : rpa chatbot"></a>wechaty : rpa chatbot</h3><p><a href="https://github.com/wechaty/wechaty#readme">https://github.com/wechaty/wechaty#readme</a></p>
<h3 id="chatgpt：一个由openai训练对大型语音模型"><a href="#chatgpt：一个由openai训练对大型语音模型" class="headerlink" title="chatgpt：一个由openai训练对大型语音模型"></a>chatgpt：一个由openai训练对大型语音模型</h3><p>登录地址：<a href="https://chat.openai.com/auth/login">https://chat.openai.com/auth/login</a></p>
<p>注册openai教程：</p>
<p><a href="https://zblogs.top/how-to-register-openai-chatgpt-in-china/">https://zblogs.top/how-to-register-openai-chatgpt-in-china/</a></p>
<p><a href="https://mirror.xyz/boxchen.eth/9O9CSqyKDj4BKUIil7NC1Sa1LJM-3hsPqaeW_QjfFBc">https://mirror.xyz/boxchen.eth/9O9CSqyKDj4BKUIil7NC1Sa1LJM-3hsPqaeW_QjfFBc</a></p>
<p>手机号获取网站：<a href="https://sms-activate.org/cn/getNumber">https://sms-activate.org/cn/getNumber</a></p>
<h3 id="railway：免费部署应用"><a href="#railway：免费部署应用" class="headerlink" title="railway：免费部署应用"></a>railway：免费部署应用</h3><p><a href="https://railway.app/new">https://railway.app/new</a></p>
<p>github账号登录</p>
<h3 id="开源工具："><a href="#开源工具：" class="headerlink" title="开源工具："></a>开源工具：</h3><p><a href="https://github.com/fuergaosi233/wechat-chatgpt">https://github.com/fuergaosi233/wechat-chatgpt</a></p>
<p>docker run -d –name wechat-chatgpt  holegots&#x2F;wechat-chatgpt:latest</p>
<p>docker run -d –name wechat-chatgpt -v .&#x2F;config.yaml:&#x2F;app&#x2F;config.yaml  holegots&#x2F;wechat-chatgpt:latest</p>
<p>docker run -d –name wechat-chatgpt -v $(pwd)&#x2F;config.yaml:&#x2F;app&#x2F;config.yaml -v $(pwd)&#x2F;wechat-assistant.memory-card.json:&#x2F;app&#x2F;wechat-assistant.memory-card.json holegots&#x2F;wechat-chatgpt:latest</p>
]]></content>
      <categories>
        <category>ai</category>
      </categories>
      <tags>
        <tag>wechat,chatgpt</tag>
      </tags>
  </entry>
  <entry>
    <title>基于本地知识库到llm</title>
    <url>/%E5%9F%BA%E4%BA%8E%E6%9C%AC%E5%9C%B0%E7%9F%A5%E8%AF%86%E5%BA%93%E7%9A%84llm/</url>
    <content><![CDATA[<p>开源代码</p>
<p><a href="https://github.com/imClumsyPanda/langchain-ChatGLM">https://github.com/imClumsyPanda/langchain-ChatGLM</a></p>
<p>代码分析：</p>
<p>langchain+llm</p>
<p>langchain介绍材料</p>
<p><a href="https://github.com/liaokongVFX/LangChain-Chinese-Getting-Started-Guide">https://github.com/liaokongVFX/LangChain-Chinese-Getting-Started-Guide</a></p>
<p>gpu模型– 按小时计费</p>
<p><a href="https://www.codewithgpu.com/i/imClumsyPanda/langchain-ChatGLM/langchain-ChatGLM">https://www.codewithgpu.com/i/imClumsyPanda/langchain-ChatGLM/langchain-ChatGLM</a></p>
<p>启动模型</p>
<p><code>$  cd /root/langchain-ChatGLM/ $  conda activate /root/pyenv </code></p>
<p><code>$ python webui.py</code></p>
]]></content>
      <categories>
        <category>ai</category>
      </categories>
      <tags>
        <tag>llm</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Hexo</title>
    <url>/hello-hexo/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is my very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="创建一篇文章"><a href="#创建一篇文章" class="headerlink" title="创建一篇文章"></a>创建一篇文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate 或者 hexo g</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="本地运行测试"><a href="#本地运行测试" class="headerlink" title="本地运行测试"></a>本地运行测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server 或者 hexo s</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="发布到远程服务器"><a href="#发布到远程服务器" class="headerlink" title="发布到远程服务器"></a>发布到远程服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy 或者 hexo d</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
<h3 id="清除本地缓存"><a href="#清除本地缓存" class="headerlink" title="清除本地缓存"></a>清除本地缓存</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#相对路径插入图片，图片放在source/images</span></span><br><span class="line">![图片名称](/images/pictureName.png)</span><br><span class="line"><span class="comment">#图片可以放在文章所在的目录中，需要先在hexo目录下的配置文件_config.yml中修改为post_asset_folder: true 执行命令$ hexo new article_name，在source/_posts中会生成文章article_name.md和同名文件夹article_name。将图片资源放在article_name文件夹中，文章就可以使用相对路径引用图片资源了。</span></span><br><span class="line">![图片名称](pictureName.png)</span><br><span class="line"><span class="comment">#网络图片引用</span></span><br><span class="line">![图片标签](图片网络地址)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hello elasticsearch</title>
    <url>/hello-elasticsearch/</url>
    <content><![CDATA[<p>日常工作主要是基于elasticsearch的垂直领域搜索功能开发，这里打算出个专题介绍如何通过ES来打造一个完整的搜索。<br>由于ES版本更新比较快，目前在写博客的时候已经到了7.12.0，这里也采用最新的版本来介绍。<br>大概分为以下三个模块来学习：ES基础、搜索、生产实战、源码分析</p>
<h2 id="ES基础"><a href="#ES基础" class="headerlink" title="ES基础"></a>ES基础</h2><p>1、ES的安装和配置<br>&#x3D;&#x3D;&gt;<a href="https://yanhangr.github.io/2020/08/09/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85elasticsearch%E9%9B%86%E7%BE%A4/">使用docker安装elasticsearch集群</a><br>2、基本概念<br>mapping和setting<br>3、ES集群的查询和写入逻辑<br>4、query<br>5、aggregation<br>6、analysis<br>7、运维和监控</p>
<h2 id="ES搜索"><a href="#ES搜索" class="headerlink" title="ES搜索"></a>ES搜索</h2><p>1、ES插件开发(基于hanlp的分词插件)<br>2、智能纠错<br>3、联想词</p>
<h2 id="生产实战"><a href="#生产实战" class="headerlink" title="生产实战"></a>生产实战</h2><p>1、ES多活灾备<br>2、ES多种写入方式<br>3、基于Java注解的mapping生成工具<br>4、多集群多索引的通用写入查询功能<br>5、大数据量下的写入查询优化</p>
<h2 id="ES涉及的算法"><a href="#ES涉及的算法" class="headerlink" title="ES涉及的算法"></a>ES涉及的算法</h2><p>1、各种类型的搜索算法是什么养的，比如数值类型如何被查询的（大于小于）</p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>1、ES启动<br>2、ES threadPool<br>3、ES action</p>
]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>elasticsearch</tag>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>linux概念</title>
    <url>/linux%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h3 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向<a href="https://zh.wikipedia.org/wiki/%E5%86%85%E6%A0%B8">内核</a>为每一个<a href="https://zh.wikipedia.org/wiki/%E8%BF%9B%E7%A8%8B">进程</a>所维护的该进程打开文件的记录表。Linux 系统中，把一切都看做是文件，当进程打开现有文件或创建新文件时，内核向进程返回一个文件描述符，文件描述符就是内核为了高效管理已被打开的文件所创建的索引，用来指向被打开的文件，所有执行I&#x2F;O操作的系统调用都会通过文件描述符。</p>
<p>查看和设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看文件描述符限制，默认是1024</span></span><br><span class="line">$ <span class="built_in">ulimit</span> -n</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改文件描述符</span></span><br><span class="line"><span class="comment">#临时修改，仅在当前session生效</span></span><br><span class="line">$ sudo su  </span><br><span class="line">$ <span class="built_in">ulimit</span> -n 65535 </span><br><span class="line">$ su yanhangr</span><br><span class="line"></span><br><span class="line"><span class="comment">#永久生效</span></span><br><span class="line">$ vi /etc/security/limits.conf</span><br><span class="line"><span class="comment">#添加行,设置最大描述符65535，yanhangr表示用户名</span></span><br><span class="line">yanhangr  -  nofile  65535</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
